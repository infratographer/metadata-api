package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31-dev

import (
	"context"

	"entgo.io/contrib/entgql"
	"go.infratographer.com/x/gidx"

	"go.infratographer.com/metadata-api/internal/ent/generated"
	"go.infratographer.com/metadata-api/internal/ent/generated/metadata"
	"go.infratographer.com/metadata-api/internal/ent/generated/statusnamespace"
)

// Owner is the resolver for the owner field.
func (r *statusNamespaceResolver) Owner(ctx context.Context, obj *generated.StatusNamespace) (*StatusOwner, error) {
	return &StatusOwner{ID: obj.ResourceProviderID}, nil
}

// StatusNamespaces is the resolver for the statusNamespaces field.
func (r *statusOwnerResolver) StatusNamespaces(ctx context.Context, obj *StatusOwner, after *entgql.Cursor[gidx.PrefixedID], first *int, before *entgql.Cursor[gidx.PrefixedID], last *int, orderBy *generated.StatusNamespaceOrder, where *generated.StatusNamespaceWhereInput) (*generated.StatusNamespaceConnection, error) {
	return r.client.StatusNamespace.Query().Where(statusnamespace.ResourceProviderID(obj.ID)).Paginate(ctx, after, first, before, last, generated.WithStatusNamespaceOrder(orderBy), generated.WithStatusNamespaceFilter(where.Filter))
}

// Metadata is the resolver for the metadata field.
func (r *statusOwnerResolver) Metadata(ctx context.Context, obj *StatusOwner) (*generated.Metadata, error) {
	m, err := r.client.Metadata.Query().Where(metadata.NodeID(obj.ID)).First(ctx)
	// Don't return an error if it isn't found, metadata is optional
	err = generated.MaskNotFound(err)
	return m, err
}

// StatusOwner returns StatusOwnerResolver implementation.
func (r *Resolver) StatusOwner() StatusOwnerResolver { return &statusOwnerResolver{r} }

type statusOwnerResolver struct{ *Resolver }
