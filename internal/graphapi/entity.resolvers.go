package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31-dev

import (
	"context"
	"fmt"

	"go.infratographer.com/metadata-api/internal/ent/generated"
	"go.infratographer.com/x/gidx"
)

// FindAnnotationByID is the resolver for the findAnnotationByID field.
func (r *entityResolver) FindAnnotationByID(ctx context.Context, id gidx.PrefixedID) (*generated.Annotation, error) {
	return r.client.Annotation.Get(ctx, id)
}

// FindAnnotationNamespaceByID is the resolver for the findAnnotationNamespaceByID field.
func (r *entityResolver) FindAnnotationNamespaceByID(ctx context.Context, id gidx.PrefixedID) (*generated.AnnotationNamespace, error) {
	return r.client.AnnotationNamespace.Get(ctx, id)
}

// FindMetadataByID is the resolver for the findMetadataByID field.
func (r *entityResolver) FindMetadataByID(ctx context.Context, id gidx.PrefixedID) (*generated.Metadata, error) {
	panic(fmt.Errorf("not implemented: FindMetadataByID - findMetadataByID"))
}

// FindMetadataByNodeID is the resolver for the findMetadataByNodeID field.
func (r *entityResolver) FindMetadataByNodeID(ctx context.Context, nodeID gidx.PrefixedID) (*generated.Metadata, error) {
	panic(fmt.Errorf("not implemented: FindMetadataByNodeID - findMetadataByNodeID"))
}

// FindMetadataNodeByID is the resolver for the findMetadataNodeByID field.
func (r *entityResolver) FindMetadataNodeByID(ctx context.Context, id gidx.PrefixedID) (*MetadataNode, error) {
	return &MetadataNode{ID: id}, nil
}

// FindResourceOwnerByID is the resolver for the findResourceOwnerByID field.
func (r *entityResolver) FindResourceOwnerByID(ctx context.Context, id gidx.PrefixedID) (*ResourceOwner, error) {
	return &ResourceOwner{ID: id}, nil
}

// FindStatusByID is the resolver for the findStatusByID field.
func (r *entityResolver) FindStatusByID(ctx context.Context, id gidx.PrefixedID) (*generated.Status, error) {
	return r.client.Status.Get(ctx, id)
}

// FindStatusNamespaceByID is the resolver for the findStatusNamespaceByID field.
func (r *entityResolver) FindStatusNamespaceByID(ctx context.Context, id gidx.PrefixedID) (*generated.StatusNamespace, error) {
	return r.client.StatusNamespace.Get(ctx, id)
}

// FindStatusOwnerByID is the resolver for the findStatusOwnerByID field.
func (r *entityResolver) FindStatusOwnerByID(ctx context.Context, id gidx.PrefixedID) (*StatusOwner, error) {
	return &StatusOwner{ID: id}, nil
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
