package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"database/sql"

	"go.infratographer.com/metadata-api/internal/ent/generated"
	"go.infratographer.com/metadata-api/internal/ent/generated/annotation"
	"go.infratographer.com/permissions-api/pkg/permissions"
	"go.infratographer.com/x/gidx"
)

// AnnotationNamespaceCreate is the resolver for the annotationNamespaceCreate field.
func (r *mutationResolver) AnnotationNamespaceCreate(ctx context.Context, input generated.CreateAnnotationNamespaceInput) (*AnnotationNamespaceCreatePayload, error) {
	if input.Name == "" {
		return nil, NewInvalidFieldError("name", ErrFieldEmpty)
	}

	if input.OwnerID == "" {
		return nil, NewInvalidFieldError("ownerID", ErrFieldEmpty)
	}

	if _, err := gidx.Parse(input.OwnerID.String()); err != nil {
		return nil, NewInvalidFieldError("ownerID", err)
	}

	if err := permissions.CheckAccess(ctx, input.OwnerID, actionMetadataAnnotationNamespaceUpdate); err != nil {
		return nil, err
	}

	ns, err := r.client.AnnotationNamespace.Create().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			return nil, err
		}

		if generated.IsConstraintError(err) {
			return nil, NewInvalidFieldError("name", ErrUniquenessConstraint)
		}

		r.logger.Errorw("failed to create annotation namespace", "error", err)

		return nil, ErrInternalServerError
	}

	return &AnnotationNamespaceCreatePayload{AnnotationNamespace: ns}, nil
}

// AnnotationNamespaceDelete is the resolver for the annotationNamespaceDelete field.
func (r *mutationResolver) AnnotationNamespaceDelete(ctx context.Context, id gidx.PrefixedID, force bool) (*AnnotationNamespaceDeletePayload, error) {
	logger := r.logger.With("annotationNamespaceID", id)

	if id == "" {
		return nil, NewInvalidFieldError("id", ErrFieldEmpty)
	}

	if _, err := gidx.Parse(id.String()); err != nil {
		return nil, NewInvalidFieldError("id", err)
	}

	_, err := r.client.AnnotationNamespace.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		logger.Errorw("failed to get annotation namespace", "error", err)
		return nil, ErrInternalServerError
	}

	if err := permissions.CheckAccess(ctx, id, actionMetadataAnnotationNamespaceUpdate); err != nil {
		return nil, err
	}

	tx, err := r.client.BeginTx(ctx, &sql.TxOptions{})
	if err != nil {
		return nil, err
	}

	defer tx.Rollback()

	annotations, err := tx.Annotation.Query().Where(annotation.AnnotationNamespaceID(id)).All(ctx)
	if err != nil {
		logger.Errorw("failed to get annotations", "error", err)
		return nil, ErrInternalServerError
	}

	antCount := len(annotations)
	if antCount != 0 {
		if force {
			antCount := 0
			for _, ant := range annotations {
				// TODO - :bug: - must delete one-by-one to ensure the deleted ID is available when the delete eventhook is triggered
				// r.client.Annotation.Delete().Where(annotation.AnnotationNamespaceID(id)).Exec(ctx)
				if err := tx.Annotation.DeleteOneID(ant.ID).Exec(ctx); err != nil {
					logger.Errorw("failed to delete annotation", "error", err)
					return nil, ErrInternalServerError
				}
				antCount++
			}
		} else {
			return nil, ErrNamespaceInUse
		}
	}

	if err := tx.AnnotationNamespace.DeleteOneID(id).Exec(ctx); err != nil {
		logger.Errorw("failed to delete annotation namespace", "error", err)
		return nil, ErrInternalServerError
	}

	if err := tx.Commit(); err != nil {
		logger.Errorw("failed to commit transaction", "error", err)
		return nil, ErrInternalServerError
	}

	return &AnnotationNamespaceDeletePayload{DeletedID: id, AnnotationDeletedCount: antCount}, nil
}

// AnnotationNamespaceUpdate is the resolver for the annotationNamespaceUpdate field.
func (r *mutationResolver) AnnotationNamespaceUpdate(ctx context.Context, id gidx.PrefixedID, input generated.UpdateAnnotationNamespaceInput) (*AnnotationNamespaceUpdatePayload, error) {
	logger := r.logger.With("annotationNamespaceID", id)

	if id == "" {
		return nil, NewInvalidFieldError("id", ErrFieldEmpty)
	}

	if _, err := gidx.Parse(id.String()); err != nil {
		return nil, NewInvalidFieldError("id", err)
	}

	if input.Name != nil && *input.Name == "" {
		return nil, NewInvalidFieldError("name", ErrFieldEmpty)
	}

	ns, err := r.client.AnnotationNamespace.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		logger.Errorw("failed to get annotation namespace", "error", err)
		return nil, ErrInternalServerError
	}

	if err := permissions.CheckAccess(ctx, id, actionMetadataAnnotationNamespaceUpdate); err != nil {
		return nil, err
	}

	ns, err = ns.Update().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsConstraintError(err) {
			return nil, NewInvalidFieldError("name", ErrUniquenessConstraint)
		}

		logger.Errorw("failed to update annotation namespace", "error", err)
		return nil, ErrInternalServerError
	}

	return &AnnotationNamespaceUpdatePayload{AnnotationNamespace: ns}, nil
}

// AnnotationNamespace is the resolver for the annotationNamespace field.
func (r *queryResolver) AnnotationNamespace(ctx context.Context, id gidx.PrefixedID) (*generated.AnnotationNamespace, error) {
	logger := r.logger.With("annotationNamespaceID", id)

	if id == "" {
		return nil, NewInvalidFieldError("id", ErrFieldEmpty)
	}

	if _, err := gidx.Parse(id.String()); err != nil {
		return nil, NewInvalidFieldError("id", err)
	}

	ns, err := r.client.AnnotationNamespace.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		logger.Errorw("failed to get annotation namespace", "error", err)
		return nil, ErrInternalServerError
	}

	if err := permissions.CheckAccess(ctx, id, actionMetadataAnnotationNamespaceUpdate); err != nil {
		return nil, err
	}

	return ns, nil
}
