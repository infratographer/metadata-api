package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"go.infratographer.com/metadata-api/internal/ent/generated"
	"go.infratographer.com/metadata-api/internal/ent/generated/annotationnamespace"
	"go.infratographer.com/x/gidx"
)

// Tenant is the resolver for the tenant field.
func (r *annotationNamespaceResolver) Tenant(ctx context.Context, obj *generated.AnnotationNamespace) (*Tenant, error) {
	return &Tenant{ID: obj.TenantID}, nil
}

// Tenant is the resolver for the tenant field.
func (r *statusNamespaceResolver) Tenant(ctx context.Context, obj *generated.StatusNamespace) (*Tenant, error) {
	panic(fmt.Errorf("not implemented: Tenant - tenant"))
}

// AnnotationNamespaces is the resolver for the annotationNamespaces field.
func (r *tenantResolver) AnnotationNamespaces(ctx context.Context, obj *Tenant, after *entgql.Cursor[gidx.PrefixedID], first *int, before *entgql.Cursor[gidx.PrefixedID], last *int, orderBy *generated.AnnotationNamespaceOrder, where *generated.AnnotationNamespaceWhereInput) (*generated.AnnotationNamespaceConnection, error) {
	return r.client.AnnotationNamespace.Query().Where(annotationnamespace.TenantID(obj.ID)).Paginate(ctx, after, first, before, last, generated.WithAnnotationNamespaceOrder(orderBy), generated.WithAnnotationNamespaceFilter(where.Filter))
}

// StatusNamespaces is the resolver for the statusNamespaces field.
func (r *tenantResolver) StatusNamespaces(ctx context.Context, obj *Tenant, after *entgql.Cursor[gidx.PrefixedID], first *int, before *entgql.Cursor[gidx.PrefixedID], last *int, orderBy *generated.StatusNamespaceOrder, where *generated.StatusNamespaceWhereInput) (*generated.StatusNamespaceConnection, error) {
	panic(fmt.Errorf("not implemented: StatusNamespaces - statusNamespaces"))
}

// Tenant returns TenantResolver implementation.
func (r *Resolver) Tenant() TenantResolver { return &tenantResolver{r} }

type tenantResolver struct{ *Resolver }
