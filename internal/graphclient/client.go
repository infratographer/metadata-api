// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package graphclient

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"github.com/Yamashou/gqlgenc/client"
	"go.infratographer.com/x/gidx"
)

type GraphClient interface {
	AnnotationDelete(ctx context.Context, input AnnotationDeleteInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationDelete, error)
	AnnotationNamespaceCreate(ctx context.Context, input CreateAnnotationNamespaceInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationNamespaceCreate, error)
	AnnotationNamespaceDelete(ctx context.Context, id gidx.PrefixedID, force bool, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationNamespaceDelete, error)
	AnnotationNamespaceUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateAnnotationNamespaceInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationNamespaceUpdate, error)
	AnnotationUpdate(ctx context.Context, input AnnotationUpdateInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationUpdate, error)
	GetTenantAnnotationNamespaces(ctx context.Context, id gidx.PrefixedID, orderBy *AnnotationNamespaceOrder, httpRequestOptions ...client.HTTPRequestOption) (*GetTenantAnnotationNamespaces, error)
}

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) GraphClient {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	Metadata *Metadata "json:\"metadata\" graphql:\"metadata\""
	Entities []Entity  "json:\"_entities\" graphql:\"_entities\""
	Service  Service   "json:\"_service\" graphql:\"_service\""
}
type Mutation struct {
	AnnotationUpdate          AnnotationUpdateResponse         "json:\"annotationUpdate\" graphql:\"annotationUpdate\""
	AnnotationDelete          AnnotationDeleteResponse         "json:\"annotationDelete\" graphql:\"annotationDelete\""
	AnnotationNamespaceCreate AnnotationNamespaceCreatePayload "json:\"annotationNamespaceCreate\" graphql:\"annotationNamespaceCreate\""
	AnnotationNamespaceDelete AnnotationNamespaceDeletePayload "json:\"annotationNamespaceDelete\" graphql:\"annotationNamespaceDelete\""
	AnnotationNamespaceUpdate AnnotationNamespaceUpdatePayload "json:\"annotationNamespaceUpdate\" graphql:\"annotationNamespaceUpdate\""
}
type AnnotationDelete struct {
	AnnotationDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"annotationDelete\" graphql:\"annotationDelete\""
}
type AnnotationNamespaceCreate struct {
	AnnotationNamespaceCreate struct {
		AnnotationNamespace struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name      string          "json:\"name\" graphql:\"name\""
			Private   bool            "json:\"private\" graphql:\"private\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
			Tenant    struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"tenant\" graphql:\"tenant\""
		} "json:\"annotationNamespace\" graphql:\"annotationNamespace\""
	} "json:\"annotationNamespaceCreate\" graphql:\"annotationNamespaceCreate\""
}
type AnnotationNamespaceDelete struct {
	AnnotationNamespaceDelete struct {
		DeletedID              gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
		AnnotationDeletedCount int64           "json:\"annotationDeletedCount\" graphql:\"annotationDeletedCount\""
	} "json:\"annotationNamespaceDelete\" graphql:\"annotationNamespaceDelete\""
}
type AnnotationNamespaceUpdate struct {
	AnnotationNamespaceUpdate struct {
		AnnotationNamespace struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name      string          "json:\"name\" graphql:\"name\""
			Private   bool            "json:\"private\" graphql:\"private\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
			Tenant    struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"tenant\" graphql:\"tenant\""
		} "json:\"annotationNamespace\" graphql:\"annotationNamespace\""
	} "json:\"annotationNamespaceUpdate\" graphql:\"annotationNamespaceUpdate\""
}
type AnnotationUpdate struct {
	AnnotationUpdate struct {
		Annotation struct {
			ID       gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Metadata struct {
				ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
				NodeID gidx.PrefixedID "json:\"nodeID\" graphql:\"nodeID\""
			} "json:\"metadata\" graphql:\"metadata\""
			Namespace struct {
				ID      gidx.PrefixedID "json:\"id\" graphql:\"id\""
				Name    string          "json:\"name\" graphql:\"name\""
				Private bool            "json:\"private\" graphql:\"private\""
			} "json:\"namespace\" graphql:\"namespace\""
			Data      json.RawMessage "json:\"data\" graphql:\"data\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"annotation\" graphql:\"annotation\""
	} "json:\"annotationUpdate\" graphql:\"annotationUpdate\""
}
type GetTenantAnnotationNamespaces struct {
	Entities []*struct {
		AnnotationNamespaces struct {
			Edges []*struct {
				Node *struct {
					ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
					Name      string          "json:\"name\" graphql:\"name\""
					Private   bool            "json:\"private\" graphql:\"private\""
					CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
					UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
				} "json:\"node\" graphql:\"node\""
			} "json:\"edges\" graphql:\"edges\""
		} "json:\"annotationNamespaces\" graphql:\"annotationNamespaces\""
	} "json:\"_entities\" graphql:\"_entities\""
}

const AnnotationDeleteDocument = `mutation AnnotationDelete ($input: AnnotationDeleteInput!) {
	annotationDelete(input: $input) {
		deletedID
	}
}
`

func (c *Client) AnnotationDelete(ctx context.Context, input AnnotationDeleteInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationDelete, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AnnotationDelete
	if err := c.Client.Post(ctx, "AnnotationDelete", AnnotationDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AnnotationNamespaceCreateDocument = `mutation AnnotationNamespaceCreate ($input: CreateAnnotationNamespaceInput!) {
	annotationNamespaceCreate(input: $input) {
		annotationNamespace {
			id
			name
			private
			createdAt
			updatedAt
			tenant {
				id
			}
		}
	}
}
`

func (c *Client) AnnotationNamespaceCreate(ctx context.Context, input CreateAnnotationNamespaceInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationNamespaceCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AnnotationNamespaceCreate
	if err := c.Client.Post(ctx, "AnnotationNamespaceCreate", AnnotationNamespaceCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AnnotationNamespaceDeleteDocument = `mutation AnnotationNamespaceDelete ($id: ID!, $force: Boolean! = false) {
	annotationNamespaceDelete(id: $id, force: $force) {
		deletedID
		annotationDeletedCount
	}
}
`

func (c *Client) AnnotationNamespaceDelete(ctx context.Context, id gidx.PrefixedID, force bool, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationNamespaceDelete, error) {
	vars := map[string]interface{}{
		"id":    id,
		"force": force,
	}

	var res AnnotationNamespaceDelete
	if err := c.Client.Post(ctx, "AnnotationNamespaceDelete", AnnotationNamespaceDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AnnotationNamespaceUpdateDocument = `mutation AnnotationNamespaceUpdate ($id: ID!, $input: UpdateAnnotationNamespaceInput!) {
	annotationNamespaceUpdate(id: $id, input: $input) {
		annotationNamespace {
			id
			name
			private
			createdAt
			updatedAt
			tenant {
				id
			}
		}
	}
}
`

func (c *Client) AnnotationNamespaceUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateAnnotationNamespaceInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationNamespaceUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res AnnotationNamespaceUpdate
	if err := c.Client.Post(ctx, "AnnotationNamespaceUpdate", AnnotationNamespaceUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AnnotationUpdateDocument = `mutation AnnotationUpdate ($input: AnnotationUpdateInput!) {
	annotationUpdate(input: $input) {
		annotation {
			id
			metadata {
				id
				nodeID
			}
			namespace {
				id
				name
				private
			}
			data
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) AnnotationUpdate(ctx context.Context, input AnnotationUpdateInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationUpdate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AnnotationUpdate
	if err := c.Client.Post(ctx, "AnnotationUpdate", AnnotationUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetTenantAnnotationNamespacesDocument = `query GetTenantAnnotationNamespaces ($id: ID!, $orderBy: AnnotationNamespaceOrder) {
	_entities(representations: {__typename:"Tenant",id:$id}) {
		... on Tenant {
			annotationNamespaces(orderBy: $orderBy) {
				edges {
					node {
						id
						name
						private
						createdAt
						updatedAt
					}
				}
			}
		}
	}
}
`

func (c *Client) GetTenantAnnotationNamespaces(ctx context.Context, id gidx.PrefixedID, orderBy *AnnotationNamespaceOrder, httpRequestOptions ...client.HTTPRequestOption) (*GetTenantAnnotationNamespaces, error) {
	vars := map[string]interface{}{
		"id":      id,
		"orderBy": orderBy,
	}

	var res GetTenantAnnotationNamespaces
	if err := c.Client.Post(ctx, "GetTenantAnnotationNamespaces", GetTenantAnnotationNamespacesDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
