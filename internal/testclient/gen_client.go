// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package testclient

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"github.com/Yamashou/gqlgenc/client"
	"go.infratographer.com/x/gidx"
)

type TestClient interface {
	AnnotationDelete(ctx context.Context, input AnnotationDeleteInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationDelete, error)
	AnnotationNamespaceCreate(ctx context.Context, input CreateAnnotationNamespaceInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationNamespaceCreate, error)
	AnnotationNamespaceDelete(ctx context.Context, id gidx.PrefixedID, force bool, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationNamespaceDelete, error)
	AnnotationNamespaceUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateAnnotationNamespaceInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationNamespaceUpdate, error)
	AnnotationUpdate(ctx context.Context, input AnnotationUpdateInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationUpdate, error)
	GetNodeMetadata(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetNodeMetadata, error)
	GetResourceOwnerAnnotationNamespaces(ctx context.Context, id gidx.PrefixedID, orderBy *AnnotationNamespaceOrder, httpRequestOptions ...client.HTTPRequestOption) (*GetResourceOwnerAnnotationNamespaces, error)
	GetResourceProviderStatusNamespaces(ctx context.Context, id gidx.PrefixedID, orderBy *StatusNamespaceOrder, httpRequestOptions ...client.HTTPRequestOption) (*GetResourceProviderStatusNamespaces, error)
	StatusDelete(ctx context.Context, input StatusDeleteInput, httpRequestOptions ...client.HTTPRequestOption) (*StatusDelete, error)
	StatusNamespaceCreate(ctx context.Context, input CreateStatusNamespaceInput, httpRequestOptions ...client.HTTPRequestOption) (*StatusNamespaceCreate, error)
	StatusNamespaceDelete(ctx context.Context, id gidx.PrefixedID, force bool, httpRequestOptions ...client.HTTPRequestOption) (*StatusNamespaceDelete, error)
	StatusNamespaceUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateStatusNamespaceInput, httpRequestOptions ...client.HTTPRequestOption) (*StatusNamespaceUpdate, error)
	StatusUpdate(ctx context.Context, input StatusUpdateInput, httpRequestOptions ...client.HTTPRequestOption) (*StatusUpdate, error)
}

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) TestClient {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	AnnotationNamespace AnnotationNamespace "json:\"annotationNamespace\" graphql:\"annotationNamespace\""
	Entities            []Entity            "json:\"_entities\" graphql:\"_entities\""
	Service             Service             "json:\"_service\" graphql:\"_service\""
}
type Mutation struct {
	AnnotationUpdate          AnnotationUpdateResponse         "json:\"annotationUpdate\" graphql:\"annotationUpdate\""
	AnnotationDelete          AnnotationDeleteResponse         "json:\"annotationDelete\" graphql:\"annotationDelete\""
	AnnotationNamespaceCreate AnnotationNamespaceCreatePayload "json:\"annotationNamespaceCreate\" graphql:\"annotationNamespaceCreate\""
	AnnotationNamespaceDelete AnnotationNamespaceDeletePayload "json:\"annotationNamespaceDelete\" graphql:\"annotationNamespaceDelete\""
	AnnotationNamespaceUpdate AnnotationNamespaceUpdatePayload "json:\"annotationNamespaceUpdate\" graphql:\"annotationNamespaceUpdate\""
	StatusUpdate              StatusUpdateResponse             "json:\"statusUpdate\" graphql:\"statusUpdate\""
	StatusDelete              StatusDeleteResponse             "json:\"statusDelete\" graphql:\"statusDelete\""
	StatusNamespaceCreate     StatusNamespaceCreatePayload     "json:\"statusNamespaceCreate\" graphql:\"statusNamespaceCreate\""
	StatusNamespaceDelete     StatusNamespaceDeletePayload     "json:\"statusNamespaceDelete\" graphql:\"statusNamespaceDelete\""
	StatusNamespaceUpdate     StatusNamespaceUpdatePayload     "json:\"statusNamespaceUpdate\" graphql:\"statusNamespaceUpdate\""
}
type AnnotationDelete struct {
	AnnotationDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"annotationDelete\" graphql:\"annotationDelete\""
}
type AnnotationNamespaceCreate struct {
	AnnotationNamespaceCreate struct {
		AnnotationNamespace struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name      string          "json:\"name\" graphql:\"name\""
			Private   bool            "json:\"private\" graphql:\"private\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
			Owner     struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"owner\" graphql:\"owner\""
		} "json:\"annotationNamespace\" graphql:\"annotationNamespace\""
	} "json:\"annotationNamespaceCreate\" graphql:\"annotationNamespaceCreate\""
}
type AnnotationNamespaceDelete struct {
	AnnotationNamespaceDelete struct {
		DeletedID              gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
		AnnotationDeletedCount int64           "json:\"annotationDeletedCount\" graphql:\"annotationDeletedCount\""
	} "json:\"annotationNamespaceDelete\" graphql:\"annotationNamespaceDelete\""
}
type AnnotationNamespaceUpdate struct {
	AnnotationNamespaceUpdate struct {
		AnnotationNamespace struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name      string          "json:\"name\" graphql:\"name\""
			Private   bool            "json:\"private\" graphql:\"private\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
			Owner     struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"owner\" graphql:\"owner\""
		} "json:\"annotationNamespace\" graphql:\"annotationNamespace\""
	} "json:\"annotationNamespaceUpdate\" graphql:\"annotationNamespaceUpdate\""
}
type AnnotationUpdate struct {
	AnnotationUpdate struct {
		Annotation struct {
			ID       gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Metadata struct {
				ID   gidx.PrefixedID "json:\"id\" graphql:\"id\""
				Node struct {
					ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
				} "json:\"node\" graphql:\"node\""
			} "json:\"metadata\" graphql:\"metadata\""
			Namespace struct {
				ID      gidx.PrefixedID "json:\"id\" graphql:\"id\""
				Name    string          "json:\"name\" graphql:\"name\""
				Private bool            "json:\"private\" graphql:\"private\""
			} "json:\"namespace\" graphql:\"namespace\""
			Data      json.RawMessage "json:\"data\" graphql:\"data\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"annotation\" graphql:\"annotation\""
	} "json:\"annotationUpdate\" graphql:\"annotationUpdate\""
}
type GetNodeMetadata struct {
	Entities []*struct {
		Metadata *struct {
			Annotations struct {
				Edges []*struct {
					Node *struct {
						Namespace struct {
							Name string "json:\"name\" graphql:\"name\""
						} "json:\"namespace\" graphql:\"namespace\""
						Data json.RawMessage "json:\"data\" graphql:\"data\""
					} "json:\"node\" graphql:\"node\""
				} "json:\"edges\" graphql:\"edges\""
			} "json:\"annotations\" graphql:\"annotations\""
		} "json:\"metadata\" graphql:\"metadata\""
	} "json:\"_entities\" graphql:\"_entities\""
}
type GetResourceOwnerAnnotationNamespaces struct {
	Entities []*struct {
		AnnotationNamespaces struct {
			Edges []*struct {
				Node *struct {
					ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
					Name      string          "json:\"name\" graphql:\"name\""
					Private   bool            "json:\"private\" graphql:\"private\""
					CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
					UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
				} "json:\"node\" graphql:\"node\""
			} "json:\"edges\" graphql:\"edges\""
		} "json:\"annotationNamespaces\" graphql:\"annotationNamespaces\""
	} "json:\"_entities\" graphql:\"_entities\""
}
type GetResourceProviderStatusNamespaces struct {
	Entities []*struct {
		StatusNamespaces struct {
			Edges []*struct {
				Node *struct {
					ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
					Name      string          "json:\"name\" graphql:\"name\""
					Private   bool            "json:\"private\" graphql:\"private\""
					CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
					UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
				} "json:\"node\" graphql:\"node\""
			} "json:\"edges\" graphql:\"edges\""
		} "json:\"statusNamespaces\" graphql:\"statusNamespaces\""
	} "json:\"_entities\" graphql:\"_entities\""
}
type StatusDelete struct {
	StatusDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"statusDelete\" graphql:\"statusDelete\""
}
type StatusNamespaceCreate struct {
	StatusNamespaceCreate struct {
		StatusNamespace struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name      string          "json:\"name\" graphql:\"name\""
			Private   bool            "json:\"private\" graphql:\"private\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
			Owner     struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"owner\" graphql:\"owner\""
		} "json:\"statusNamespace\" graphql:\"statusNamespace\""
	} "json:\"statusNamespaceCreate\" graphql:\"statusNamespaceCreate\""
}
type StatusNamespaceDelete struct {
	StatusNamespaceDelete struct {
		DeletedID          gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
		StatusDeletedCount int64           "json:\"statusDeletedCount\" graphql:\"statusDeletedCount\""
	} "json:\"statusNamespaceDelete\" graphql:\"statusNamespaceDelete\""
}
type StatusNamespaceUpdate struct {
	StatusNamespaceUpdate struct {
		StatusNamespace struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name      string          "json:\"name\" graphql:\"name\""
			Private   bool            "json:\"private\" graphql:\"private\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
			Owner     struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"owner\" graphql:\"owner\""
		} "json:\"statusNamespace\" graphql:\"statusNamespace\""
	} "json:\"statusNamespaceUpdate\" graphql:\"statusNamespaceUpdate\""
}
type StatusUpdate struct {
	StatusUpdate struct {
		Status struct {
			ID       gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Metadata struct {
				ID   gidx.PrefixedID "json:\"id\" graphql:\"id\""
				Node struct {
					ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
				} "json:\"node\" graphql:\"node\""
			} "json:\"metadata\" graphql:\"metadata\""
			Namespace struct {
				ID      gidx.PrefixedID "json:\"id\" graphql:\"id\""
				Name    string          "json:\"name\" graphql:\"name\""
				Private bool            "json:\"private\" graphql:\"private\""
			} "json:\"namespace\" graphql:\"namespace\""
			Source    string          "json:\"source\" graphql:\"source\""
			Data      json.RawMessage "json:\"data\" graphql:\"data\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"status\" graphql:\"status\""
	} "json:\"statusUpdate\" graphql:\"statusUpdate\""
}

const AnnotationDeleteDocument = `mutation AnnotationDelete ($input: AnnotationDeleteInput!) {
	annotationDelete(input: $input) {
		deletedID
	}
}
`

func (c *Client) AnnotationDelete(ctx context.Context, input AnnotationDeleteInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationDelete, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AnnotationDelete
	if err := c.Client.Post(ctx, "AnnotationDelete", AnnotationDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AnnotationNamespaceCreateDocument = `mutation AnnotationNamespaceCreate ($input: CreateAnnotationNamespaceInput!) {
	annotationNamespaceCreate(input: $input) {
		annotationNamespace {
			id
			name
			private
			createdAt
			updatedAt
			owner {
				id
			}
		}
	}
}
`

func (c *Client) AnnotationNamespaceCreate(ctx context.Context, input CreateAnnotationNamespaceInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationNamespaceCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AnnotationNamespaceCreate
	if err := c.Client.Post(ctx, "AnnotationNamespaceCreate", AnnotationNamespaceCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AnnotationNamespaceDeleteDocument = `mutation AnnotationNamespaceDelete ($id: ID!, $force: Boolean! = false) {
	annotationNamespaceDelete(id: $id, force: $force) {
		deletedID
		annotationDeletedCount
	}
}
`

func (c *Client) AnnotationNamespaceDelete(ctx context.Context, id gidx.PrefixedID, force bool, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationNamespaceDelete, error) {
	vars := map[string]interface{}{
		"id":    id,
		"force": force,
	}

	var res AnnotationNamespaceDelete
	if err := c.Client.Post(ctx, "AnnotationNamespaceDelete", AnnotationNamespaceDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AnnotationNamespaceUpdateDocument = `mutation AnnotationNamespaceUpdate ($id: ID!, $input: UpdateAnnotationNamespaceInput!) {
	annotationNamespaceUpdate(id: $id, input: $input) {
		annotationNamespace {
			id
			name
			private
			createdAt
			updatedAt
			owner {
				id
			}
		}
	}
}
`

func (c *Client) AnnotationNamespaceUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateAnnotationNamespaceInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationNamespaceUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res AnnotationNamespaceUpdate
	if err := c.Client.Post(ctx, "AnnotationNamespaceUpdate", AnnotationNamespaceUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AnnotationUpdateDocument = `mutation AnnotationUpdate ($input: AnnotationUpdateInput!) {
	annotationUpdate(input: $input) {
		annotation {
			id
			metadata {
				id
				node {
					id
				}
			}
			namespace {
				id
				name
				private
			}
			data
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) AnnotationUpdate(ctx context.Context, input AnnotationUpdateInput, httpRequestOptions ...client.HTTPRequestOption) (*AnnotationUpdate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AnnotationUpdate
	if err := c.Client.Post(ctx, "AnnotationUpdate", AnnotationUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetNodeMetadataDocument = `query GetNodeMetadata ($id: ID!) {
	_entities(representations: {__typename:"MetadataNode",id:$id}) {
		... on MetadataNode {
			metadata {
				annotations {
					edges {
						node {
							namespace {
								name
							}
							data
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetNodeMetadata(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetNodeMetadata, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetNodeMetadata
	if err := c.Client.Post(ctx, "GetNodeMetadata", GetNodeMetadataDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetResourceOwnerAnnotationNamespacesDocument = `query GetResourceOwnerAnnotationNamespaces ($id: ID!, $orderBy: AnnotationNamespaceOrder) {
	_entities(representations: {__typename:"ResourceOwner",id:$id}) {
		... on ResourceOwner {
			annotationNamespaces(orderBy: $orderBy) {
				edges {
					node {
						id
						name
						private
						createdAt
						updatedAt
					}
				}
			}
		}
	}
}
`

func (c *Client) GetResourceOwnerAnnotationNamespaces(ctx context.Context, id gidx.PrefixedID, orderBy *AnnotationNamespaceOrder, httpRequestOptions ...client.HTTPRequestOption) (*GetResourceOwnerAnnotationNamespaces, error) {
	vars := map[string]interface{}{
		"id":      id,
		"orderBy": orderBy,
	}

	var res GetResourceOwnerAnnotationNamespaces
	if err := c.Client.Post(ctx, "GetResourceOwnerAnnotationNamespaces", GetResourceOwnerAnnotationNamespacesDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetResourceProviderStatusNamespacesDocument = `query GetResourceProviderStatusNamespaces ($id: ID!, $orderBy: StatusNamespaceOrder) {
	_entities(representations: {__typename:"StatusOwner",id:$id}) {
		... on StatusOwner {
			statusNamespaces(orderBy: $orderBy) {
				edges {
					node {
						id
						name
						private
						createdAt
						updatedAt
					}
				}
			}
		}
	}
}
`

func (c *Client) GetResourceProviderStatusNamespaces(ctx context.Context, id gidx.PrefixedID, orderBy *StatusNamespaceOrder, httpRequestOptions ...client.HTTPRequestOption) (*GetResourceProviderStatusNamespaces, error) {
	vars := map[string]interface{}{
		"id":      id,
		"orderBy": orderBy,
	}

	var res GetResourceProviderStatusNamespaces
	if err := c.Client.Post(ctx, "GetResourceProviderStatusNamespaces", GetResourceProviderStatusNamespacesDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const StatusDeleteDocument = `mutation StatusDelete ($input: StatusDeleteInput!) {
	statusDelete(input: $input) {
		deletedID
	}
}
`

func (c *Client) StatusDelete(ctx context.Context, input StatusDeleteInput, httpRequestOptions ...client.HTTPRequestOption) (*StatusDelete, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res StatusDelete
	if err := c.Client.Post(ctx, "StatusDelete", StatusDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const StatusNamespaceCreateDocument = `mutation StatusNamespaceCreate ($input: CreateStatusNamespaceInput!) {
	statusNamespaceCreate(input: $input) {
		statusNamespace {
			id
			name
			private
			createdAt
			updatedAt
			owner {
				id
			}
		}
	}
}
`

func (c *Client) StatusNamespaceCreate(ctx context.Context, input CreateStatusNamespaceInput, httpRequestOptions ...client.HTTPRequestOption) (*StatusNamespaceCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res StatusNamespaceCreate
	if err := c.Client.Post(ctx, "StatusNamespaceCreate", StatusNamespaceCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const StatusNamespaceDeleteDocument = `mutation StatusNamespaceDelete ($id: ID!, $force: Boolean! = false) {
	statusNamespaceDelete(id: $id, force: $force) {
		deletedID
		statusDeletedCount
	}
}
`

func (c *Client) StatusNamespaceDelete(ctx context.Context, id gidx.PrefixedID, force bool, httpRequestOptions ...client.HTTPRequestOption) (*StatusNamespaceDelete, error) {
	vars := map[string]interface{}{
		"id":    id,
		"force": force,
	}

	var res StatusNamespaceDelete
	if err := c.Client.Post(ctx, "StatusNamespaceDelete", StatusNamespaceDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const StatusNamespaceUpdateDocument = `mutation StatusNamespaceUpdate ($id: ID!, $input: UpdateStatusNamespaceInput!) {
	statusNamespaceUpdate(id: $id, input: $input) {
		statusNamespace {
			id
			name
			private
			createdAt
			updatedAt
			owner {
				id
			}
		}
	}
}
`

func (c *Client) StatusNamespaceUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateStatusNamespaceInput, httpRequestOptions ...client.HTTPRequestOption) (*StatusNamespaceUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res StatusNamespaceUpdate
	if err := c.Client.Post(ctx, "StatusNamespaceUpdate", StatusNamespaceUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const StatusUpdateDocument = `mutation StatusUpdate ($input: StatusUpdateInput!) {
	statusUpdate(input: $input) {
		status {
			id
			metadata {
				id
				node {
					id
				}
			}
			namespace {
				id
				name
				private
			}
			source
			data
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) StatusUpdate(ctx context.Context, input StatusUpdateInput, httpRequestOptions ...client.HTTPRequestOption) (*StatusUpdate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res StatusUpdate
	if err := c.Client.Post(ctx, "StatusUpdate", StatusUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
