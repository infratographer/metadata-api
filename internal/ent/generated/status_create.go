// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/metadata-api/internal/ent/generated/metadata"
	"go.infratographer.com/metadata-api/internal/ent/generated/status"
	"go.infratographer.com/metadata-api/internal/ent/generated/statusnamespace"
	"go.infratographer.com/x/gidx"
)

// StatusCreate is the builder for creating a Status entity.
type StatusCreate struct {
	config
	mutation *StatusMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *StatusCreate) SetCreatedAt(v time.Time) *StatusCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *StatusCreate) SetNillableCreatedAt(v *time.Time) *StatusCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *StatusCreate) SetUpdatedAt(v time.Time) *StatusCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *StatusCreate) SetNillableUpdatedAt(v *time.Time) *StatusCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetMetadataID sets the "metadata_id" field.
func (_c *StatusCreate) SetMetadataID(v gidx.PrefixedID) *StatusCreate {
	_c.mutation.SetMetadataID(v)
	return _c
}

// SetStatusNamespaceID sets the "status_namespace_id" field.
func (_c *StatusCreate) SetStatusNamespaceID(v gidx.PrefixedID) *StatusCreate {
	_c.mutation.SetStatusNamespaceID(v)
	return _c
}

// SetSource sets the "source" field.
func (_c *StatusCreate) SetSource(v string) *StatusCreate {
	_c.mutation.SetSource(v)
	return _c
}

// SetData sets the "data" field.
func (_c *StatusCreate) SetData(v json.RawMessage) *StatusCreate {
	_c.mutation.SetData(v)
	return _c
}

// SetID sets the "id" field.
func (_c *StatusCreate) SetID(v gidx.PrefixedID) *StatusCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *StatusCreate) SetNillableID(v *gidx.PrefixedID) *StatusCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetNamespaceID sets the "namespace" edge to the StatusNamespace entity by ID.
func (_c *StatusCreate) SetNamespaceID(id gidx.PrefixedID) *StatusCreate {
	_c.mutation.SetNamespaceID(id)
	return _c
}

// SetNamespace sets the "namespace" edge to the StatusNamespace entity.
func (_c *StatusCreate) SetNamespace(v *StatusNamespace) *StatusCreate {
	return _c.SetNamespaceID(v.ID)
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (_c *StatusCreate) SetMetadata(v *Metadata) *StatusCreate {
	return _c.SetMetadataID(v.ID)
}

// Mutation returns the StatusMutation object of the builder.
func (_c *StatusCreate) Mutation() *StatusMutation {
	return _c.mutation
}

// Save creates the Status in the database.
func (_c *StatusCreate) Save(ctx context.Context) (*Status, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *StatusCreate) SaveX(ctx context.Context) *Status {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StatusCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StatusCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *StatusCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := status.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := status.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := status.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *StatusCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Status.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Status.updated_at"`)}
	}
	if _, ok := _c.mutation.MetadataID(); !ok {
		return &ValidationError{Name: "metadata_id", err: errors.New(`generated: missing required field "Status.metadata_id"`)}
	}
	if v, ok := _c.mutation.MetadataID(); ok {
		if err := status.MetadataIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "metadata_id", err: fmt.Errorf(`generated: validator failed for field "Status.metadata_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.StatusNamespaceID(); !ok {
		return &ValidationError{Name: "status_namespace_id", err: errors.New(`generated: missing required field "Status.status_namespace_id"`)}
	}
	if v, ok := _c.mutation.StatusNamespaceID(); ok {
		if err := status.StatusNamespaceIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "status_namespace_id", err: fmt.Errorf(`generated: validator failed for field "Status.status_namespace_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`generated: missing required field "Status.source"`)}
	}
	if v, ok := _c.mutation.Source(); ok {
		if err := status.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "Status.source": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`generated: missing required field "Status.data"`)}
	}
	if len(_c.mutation.NamespaceIDs()) == 0 {
		return &ValidationError{Name: "namespace", err: errors.New(`generated: missing required edge "Status.namespace"`)}
	}
	if len(_c.mutation.MetadataIDs()) == 0 {
		return &ValidationError{Name: "metadata", err: errors.New(`generated: missing required edge "Status.metadata"`)}
	}
	return nil
}

func (_c *StatusCreate) sqlSave(ctx context.Context) (*Status, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *StatusCreate) createSpec() (*Status, *sqlgraph.CreateSpec) {
	var (
		_node = &Status{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(status.Table, sqlgraph.NewFieldSpec(status.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(status.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(status.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Source(); ok {
		_spec.SetField(status.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := _c.mutation.Data(); ok {
		_spec.SetField(status.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if nodes := _c.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   status.NamespaceTable,
			Columns: []string{status.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statusnamespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StatusNamespaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   status.MetadataTable,
			Columns: []string{status.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MetadataID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StatusCreateBulk is the builder for creating many Status entities in bulk.
type StatusCreateBulk struct {
	config
	err      error
	builders []*StatusCreate
}

// Save creates the Status entities in the database.
func (_c *StatusCreateBulk) Save(ctx context.Context) ([]*Status, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Status, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *StatusCreateBulk) SaveX(ctx context.Context) []*Status {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StatusCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StatusCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
