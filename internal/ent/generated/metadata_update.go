// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/metadata-api/internal/ent/generated/annotation"
	"go.infratographer.com/metadata-api/internal/ent/generated/metadata"
	"go.infratographer.com/metadata-api/internal/ent/generated/predicate"
	"go.infratographer.com/metadata-api/internal/ent/generated/status"
	"go.infratographer.com/x/gidx"
)

// MetadataUpdate is the builder for updating Metadata entities.
type MetadataUpdate struct {
	config
	hooks    []Hook
	mutation *MetadataMutation
}

// Where appends a list predicates to the MetadataUpdate builder.
func (_u *MetadataUpdate) Where(ps ...predicate.Metadata) *MetadataUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by IDs.
func (_u *MetadataUpdate) AddAnnotationIDs(ids ...gidx.PrefixedID) *MetadataUpdate {
	_u.mutation.AddAnnotationIDs(ids...)
	return _u
}

// AddAnnotations adds the "annotations" edges to the Annotation entity.
func (_u *MetadataUpdate) AddAnnotations(v ...*Annotation) *MetadataUpdate {
	ids := make([]gidx.PrefixedID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAnnotationIDs(ids...)
}

// AddStatusIDs adds the "statuses" edge to the Status entity by IDs.
func (_u *MetadataUpdate) AddStatusIDs(ids ...gidx.PrefixedID) *MetadataUpdate {
	_u.mutation.AddStatusIDs(ids...)
	return _u
}

// AddStatuses adds the "statuses" edges to the Status entity.
func (_u *MetadataUpdate) AddStatuses(v ...*Status) *MetadataUpdate {
	ids := make([]gidx.PrefixedID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStatusIDs(ids...)
}

// Mutation returns the MetadataMutation object of the builder.
func (_u *MetadataUpdate) Mutation() *MetadataMutation {
	return _u.mutation
}

// ClearAnnotations clears all "annotations" edges to the Annotation entity.
func (_u *MetadataUpdate) ClearAnnotations() *MetadataUpdate {
	_u.mutation.ClearAnnotations()
	return _u
}

// RemoveAnnotationIDs removes the "annotations" edge to Annotation entities by IDs.
func (_u *MetadataUpdate) RemoveAnnotationIDs(ids ...gidx.PrefixedID) *MetadataUpdate {
	_u.mutation.RemoveAnnotationIDs(ids...)
	return _u
}

// RemoveAnnotations removes "annotations" edges to Annotation entities.
func (_u *MetadataUpdate) RemoveAnnotations(v ...*Annotation) *MetadataUpdate {
	ids := make([]gidx.PrefixedID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAnnotationIDs(ids...)
}

// ClearStatuses clears all "statuses" edges to the Status entity.
func (_u *MetadataUpdate) ClearStatuses() *MetadataUpdate {
	_u.mutation.ClearStatuses()
	return _u
}

// RemoveStatusIDs removes the "statuses" edge to Status entities by IDs.
func (_u *MetadataUpdate) RemoveStatusIDs(ids ...gidx.PrefixedID) *MetadataUpdate {
	_u.mutation.RemoveStatusIDs(ids...)
	return _u
}

// RemoveStatuses removes "statuses" edges to Status entities.
func (_u *MetadataUpdate) RemoveStatuses(v ...*Status) *MetadataUpdate {
	ids := make([]gidx.PrefixedID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStatusIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MetadataUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MetadataUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MetadataUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MetadataUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := metadata.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MetadataUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(metadata.Table, metadata.Columns, sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(metadata.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.AnnotationsTable,
			Columns: []string{metadata.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !_u.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.AnnotationsTable,
			Columns: []string{metadata.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.AnnotationsTable,
			Columns: []string{metadata.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.StatusesTable,
			Columns: []string{metadata.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStatusesIDs(); len(nodes) > 0 && !_u.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.StatusesTable,
			Columns: []string{metadata.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.StatusesTable,
			Columns: []string{metadata.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MetadataUpdateOne is the builder for updating a single Metadata entity.
type MetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetadataMutation
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by IDs.
func (_u *MetadataUpdateOne) AddAnnotationIDs(ids ...gidx.PrefixedID) *MetadataUpdateOne {
	_u.mutation.AddAnnotationIDs(ids...)
	return _u
}

// AddAnnotations adds the "annotations" edges to the Annotation entity.
func (_u *MetadataUpdateOne) AddAnnotations(v ...*Annotation) *MetadataUpdateOne {
	ids := make([]gidx.PrefixedID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAnnotationIDs(ids...)
}

// AddStatusIDs adds the "statuses" edge to the Status entity by IDs.
func (_u *MetadataUpdateOne) AddStatusIDs(ids ...gidx.PrefixedID) *MetadataUpdateOne {
	_u.mutation.AddStatusIDs(ids...)
	return _u
}

// AddStatuses adds the "statuses" edges to the Status entity.
func (_u *MetadataUpdateOne) AddStatuses(v ...*Status) *MetadataUpdateOne {
	ids := make([]gidx.PrefixedID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStatusIDs(ids...)
}

// Mutation returns the MetadataMutation object of the builder.
func (_u *MetadataUpdateOne) Mutation() *MetadataMutation {
	return _u.mutation
}

// ClearAnnotations clears all "annotations" edges to the Annotation entity.
func (_u *MetadataUpdateOne) ClearAnnotations() *MetadataUpdateOne {
	_u.mutation.ClearAnnotations()
	return _u
}

// RemoveAnnotationIDs removes the "annotations" edge to Annotation entities by IDs.
func (_u *MetadataUpdateOne) RemoveAnnotationIDs(ids ...gidx.PrefixedID) *MetadataUpdateOne {
	_u.mutation.RemoveAnnotationIDs(ids...)
	return _u
}

// RemoveAnnotations removes "annotations" edges to Annotation entities.
func (_u *MetadataUpdateOne) RemoveAnnotations(v ...*Annotation) *MetadataUpdateOne {
	ids := make([]gidx.PrefixedID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAnnotationIDs(ids...)
}

// ClearStatuses clears all "statuses" edges to the Status entity.
func (_u *MetadataUpdateOne) ClearStatuses() *MetadataUpdateOne {
	_u.mutation.ClearStatuses()
	return _u
}

// RemoveStatusIDs removes the "statuses" edge to Status entities by IDs.
func (_u *MetadataUpdateOne) RemoveStatusIDs(ids ...gidx.PrefixedID) *MetadataUpdateOne {
	_u.mutation.RemoveStatusIDs(ids...)
	return _u
}

// RemoveStatuses removes "statuses" edges to Status entities.
func (_u *MetadataUpdateOne) RemoveStatuses(v ...*Status) *MetadataUpdateOne {
	ids := make([]gidx.PrefixedID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStatusIDs(ids...)
}

// Where appends a list predicates to the MetadataUpdate builder.
func (_u *MetadataUpdateOne) Where(ps ...predicate.Metadata) *MetadataUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MetadataUpdateOne) Select(field string, fields ...string) *MetadataUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Metadata entity.
func (_u *MetadataUpdateOne) Save(ctx context.Context) (*Metadata, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MetadataUpdateOne) SaveX(ctx context.Context) *Metadata {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MetadataUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MetadataUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := metadata.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MetadataUpdateOne) sqlSave(ctx context.Context) (_node *Metadata, err error) {
	_spec := sqlgraph.NewUpdateSpec(metadata.Table, metadata.Columns, sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Metadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metadata.FieldID)
		for _, f := range fields {
			if !metadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != metadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(metadata.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.AnnotationsTable,
			Columns: []string{metadata.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !_u.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.AnnotationsTable,
			Columns: []string{metadata.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.AnnotationsTable,
			Columns: []string{metadata.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.StatusesTable,
			Columns: []string{metadata.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStatusesIDs(); len(nodes) > 0 && !_u.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.StatusesTable,
			Columns: []string{metadata.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.StatusesTable,
			Columns: []string{metadata.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Metadata{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
