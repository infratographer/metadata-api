// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/metadata-api/internal/ent/generated/annotation"
	"go.infratographer.com/metadata-api/internal/ent/generated/annotationnamespace"
	"go.infratographer.com/metadata-api/internal/ent/generated/metadata"
	"go.infratographer.com/metadata-api/internal/ent/generated/predicate"
	"go.infratographer.com/metadata-api/internal/ent/generated/status"
	"go.infratographer.com/metadata-api/internal/ent/generated/statusnamespace"
	"go.infratographer.com/x/gidx"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnnotation          = "Annotation"
	TypeAnnotationNamespace = "AnnotationNamespace"
	TypeMetadata            = "Metadata"
	TypeStatus              = "Status"
	TypeStatusNamespace     = "StatusNamespace"
)

// AnnotationMutation represents an operation that mutates the Annotation nodes in the graph.
type AnnotationMutation struct {
	config
	op               Op
	typ              string
	id               *gidx.PrefixedID
	created_at       *time.Time
	updated_at       *time.Time
	data             *json.RawMessage
	appenddata       json.RawMessage
	clearedFields    map[string]struct{}
	namespace        *gidx.PrefixedID
	clearednamespace bool
	metadata         *gidx.PrefixedID
	clearedmetadata  bool
	done             bool
	oldValue         func(context.Context) (*Annotation, error)
	predicates       []predicate.Annotation
}

var _ ent.Mutation = (*AnnotationMutation)(nil)

// annotationOption allows management of the mutation configuration using functional options.
type annotationOption func(*AnnotationMutation)

// newAnnotationMutation creates new mutation for the Annotation entity.
func newAnnotationMutation(c config, op Op, opts ...annotationOption) *AnnotationMutation {
	m := &AnnotationMutation{
		config:        c,
		op:            op,
		typ:           TypeAnnotation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnnotationID sets the ID field of the mutation.
func withAnnotationID(id gidx.PrefixedID) annotationOption {
	return func(m *AnnotationMutation) {
		var (
			err   error
			once  sync.Once
			value *Annotation
		)
		m.oldValue = func(ctx context.Context) (*Annotation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Annotation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnnotation sets the old Annotation of the mutation.
func withAnnotation(node *Annotation) annotationOption {
	return func(m *AnnotationMutation) {
		m.oldValue = func(context.Context) (*Annotation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnnotationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnnotationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Annotation entities.
func (m *AnnotationMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AnnotationMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AnnotationMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Annotation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AnnotationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AnnotationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Annotation entity.
// If the Annotation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AnnotationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AnnotationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AnnotationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Annotation entity.
// If the Annotation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AnnotationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetMetadataID sets the "metadata_id" field.
func (m *AnnotationMutation) SetMetadataID(gi gidx.PrefixedID) {
	m.metadata = &gi
}

// MetadataID returns the value of the "metadata_id" field in the mutation.
func (m *AnnotationMutation) MetadataID() (r gidx.PrefixedID, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadataID returns the old "metadata_id" field's value of the Annotation entity.
// If the Annotation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationMutation) OldMetadataID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadataID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadataID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadataID: %w", err)
	}
	return oldValue.MetadataID, nil
}

// ResetMetadataID resets all changes to the "metadata_id" field.
func (m *AnnotationMutation) ResetMetadataID() {
	m.metadata = nil
}

// SetAnnotationNamespaceID sets the "annotation_namespace_id" field.
func (m *AnnotationMutation) SetAnnotationNamespaceID(gi gidx.PrefixedID) {
	m.namespace = &gi
}

// AnnotationNamespaceID returns the value of the "annotation_namespace_id" field in the mutation.
func (m *AnnotationMutation) AnnotationNamespaceID() (r gidx.PrefixedID, exists bool) {
	v := m.namespace
	if v == nil {
		return
	}
	return *v, true
}

// OldAnnotationNamespaceID returns the old "annotation_namespace_id" field's value of the Annotation entity.
// If the Annotation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationMutation) OldAnnotationNamespaceID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnnotationNamespaceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnnotationNamespaceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnnotationNamespaceID: %w", err)
	}
	return oldValue.AnnotationNamespaceID, nil
}

// ResetAnnotationNamespaceID resets all changes to the "annotation_namespace_id" field.
func (m *AnnotationMutation) ResetAnnotationNamespaceID() {
	m.namespace = nil
}

// SetData sets the "data" field.
func (m *AnnotationMutation) SetData(jm json.RawMessage) {
	m.data = &jm
	m.appenddata = nil
}

// Data returns the value of the "data" field in the mutation.
func (m *AnnotationMutation) Data() (r json.RawMessage, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Annotation entity.
// If the Annotation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationMutation) OldData(ctx context.Context) (v json.RawMessage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// AppendData adds jm to the "data" field.
func (m *AnnotationMutation) AppendData(jm json.RawMessage) {
	m.appenddata = append(m.appenddata, jm...)
}

// AppendedData returns the list of values that were appended to the "data" field in this mutation.
func (m *AnnotationMutation) AppendedData() (json.RawMessage, bool) {
	if len(m.appenddata) == 0 {
		return nil, false
	}
	return m.appenddata, true
}

// ResetData resets all changes to the "data" field.
func (m *AnnotationMutation) ResetData() {
	m.data = nil
	m.appenddata = nil
}

// SetNamespaceID sets the "namespace" edge to the AnnotationNamespace entity by id.
func (m *AnnotationMutation) SetNamespaceID(id gidx.PrefixedID) {
	m.namespace = &id
}

// ClearNamespace clears the "namespace" edge to the AnnotationNamespace entity.
func (m *AnnotationMutation) ClearNamespace() {
	m.clearednamespace = true
}

// NamespaceCleared reports if the "namespace" edge to the AnnotationNamespace entity was cleared.
func (m *AnnotationMutation) NamespaceCleared() bool {
	return m.clearednamespace
}

// NamespaceID returns the "namespace" edge ID in the mutation.
func (m *AnnotationMutation) NamespaceID() (id gidx.PrefixedID, exists bool) {
	if m.namespace != nil {
		return *m.namespace, true
	}
	return
}

// NamespaceIDs returns the "namespace" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NamespaceID instead. It exists only for internal usage by the builders.
func (m *AnnotationMutation) NamespaceIDs() (ids []gidx.PrefixedID) {
	if id := m.namespace; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNamespace resets all changes to the "namespace" edge.
func (m *AnnotationMutation) ResetNamespace() {
	m.namespace = nil
	m.clearednamespace = false
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (m *AnnotationMutation) ClearMetadata() {
	m.clearedmetadata = true
}

// MetadataCleared reports if the "metadata" edge to the Metadata entity was cleared.
func (m *AnnotationMutation) MetadataCleared() bool {
	return m.clearedmetadata
}

// MetadataIDs returns the "metadata" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MetadataID instead. It exists only for internal usage by the builders.
func (m *AnnotationMutation) MetadataIDs() (ids []gidx.PrefixedID) {
	if id := m.metadata; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMetadata resets all changes to the "metadata" edge.
func (m *AnnotationMutation) ResetMetadata() {
	m.metadata = nil
	m.clearedmetadata = false
}

// Where appends a list predicates to the AnnotationMutation builder.
func (m *AnnotationMutation) Where(ps ...predicate.Annotation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AnnotationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AnnotationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Annotation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AnnotationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AnnotationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Annotation).
func (m *AnnotationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnnotationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, annotation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, annotation.FieldUpdatedAt)
	}
	if m.metadata != nil {
		fields = append(fields, annotation.FieldMetadataID)
	}
	if m.namespace != nil {
		fields = append(fields, annotation.FieldAnnotationNamespaceID)
	}
	if m.data != nil {
		fields = append(fields, annotation.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnnotationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case annotation.FieldCreatedAt:
		return m.CreatedAt()
	case annotation.FieldUpdatedAt:
		return m.UpdatedAt()
	case annotation.FieldMetadataID:
		return m.MetadataID()
	case annotation.FieldAnnotationNamespaceID:
		return m.AnnotationNamespaceID()
	case annotation.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnnotationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case annotation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case annotation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case annotation.FieldMetadataID:
		return m.OldMetadataID(ctx)
	case annotation.FieldAnnotationNamespaceID:
		return m.OldAnnotationNamespaceID(ctx)
	case annotation.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown Annotation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnnotationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case annotation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case annotation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case annotation.FieldMetadataID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadataID(v)
		return nil
	case annotation.FieldAnnotationNamespaceID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnnotationNamespaceID(v)
		return nil
	case annotation.FieldData:
		v, ok := value.(json.RawMessage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown Annotation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnnotationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnnotationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnnotationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Annotation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnnotationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnnotationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnnotationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Annotation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnnotationMutation) ResetField(name string) error {
	switch name {
	case annotation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case annotation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case annotation.FieldMetadataID:
		m.ResetMetadataID()
		return nil
	case annotation.FieldAnnotationNamespaceID:
		m.ResetAnnotationNamespaceID()
		return nil
	case annotation.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown Annotation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnnotationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.namespace != nil {
		edges = append(edges, annotation.EdgeNamespace)
	}
	if m.metadata != nil {
		edges = append(edges, annotation.EdgeMetadata)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnnotationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case annotation.EdgeNamespace:
		if id := m.namespace; id != nil {
			return []ent.Value{*id}
		}
	case annotation.EdgeMetadata:
		if id := m.metadata; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnnotationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnnotationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnnotationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearednamespace {
		edges = append(edges, annotation.EdgeNamespace)
	}
	if m.clearedmetadata {
		edges = append(edges, annotation.EdgeMetadata)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnnotationMutation) EdgeCleared(name string) bool {
	switch name {
	case annotation.EdgeNamespace:
		return m.clearednamespace
	case annotation.EdgeMetadata:
		return m.clearedmetadata
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnnotationMutation) ClearEdge(name string) error {
	switch name {
	case annotation.EdgeNamespace:
		m.ClearNamespace()
		return nil
	case annotation.EdgeMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown Annotation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnnotationMutation) ResetEdge(name string) error {
	switch name {
	case annotation.EdgeNamespace:
		m.ResetNamespace()
		return nil
	case annotation.EdgeMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Annotation edge %s", name)
}

// AnnotationNamespaceMutation represents an operation that mutates the AnnotationNamespace nodes in the graph.
type AnnotationNamespaceMutation struct {
	config
	op                 Op
	typ                string
	id                 *gidx.PrefixedID
	created_at         *time.Time
	updated_at         *time.Time
	name               *string
	owner_id           *gidx.PrefixedID
	private            *bool
	clearedFields      map[string]struct{}
	annotations        map[gidx.PrefixedID]struct{}
	removedannotations map[gidx.PrefixedID]struct{}
	clearedannotations bool
	done               bool
	oldValue           func(context.Context) (*AnnotationNamespace, error)
	predicates         []predicate.AnnotationNamespace
}

var _ ent.Mutation = (*AnnotationNamespaceMutation)(nil)

// annotationnamespaceOption allows management of the mutation configuration using functional options.
type annotationnamespaceOption func(*AnnotationNamespaceMutation)

// newAnnotationNamespaceMutation creates new mutation for the AnnotationNamespace entity.
func newAnnotationNamespaceMutation(c config, op Op, opts ...annotationnamespaceOption) *AnnotationNamespaceMutation {
	m := &AnnotationNamespaceMutation{
		config:        c,
		op:            op,
		typ:           TypeAnnotationNamespace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnnotationNamespaceID sets the ID field of the mutation.
func withAnnotationNamespaceID(id gidx.PrefixedID) annotationnamespaceOption {
	return func(m *AnnotationNamespaceMutation) {
		var (
			err   error
			once  sync.Once
			value *AnnotationNamespace
		)
		m.oldValue = func(ctx context.Context) (*AnnotationNamespace, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AnnotationNamespace.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnnotationNamespace sets the old AnnotationNamespace of the mutation.
func withAnnotationNamespace(node *AnnotationNamespace) annotationnamespaceOption {
	return func(m *AnnotationNamespaceMutation) {
		m.oldValue = func(context.Context) (*AnnotationNamespace, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnnotationNamespaceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnnotationNamespaceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AnnotationNamespace entities.
func (m *AnnotationNamespaceMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AnnotationNamespaceMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AnnotationNamespaceMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AnnotationNamespace.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AnnotationNamespaceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AnnotationNamespaceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AnnotationNamespace entity.
// If the AnnotationNamespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationNamespaceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AnnotationNamespaceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AnnotationNamespaceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AnnotationNamespaceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AnnotationNamespace entity.
// If the AnnotationNamespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationNamespaceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AnnotationNamespaceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *AnnotationNamespaceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AnnotationNamespaceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AnnotationNamespace entity.
// If the AnnotationNamespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationNamespaceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AnnotationNamespaceMutation) ResetName() {
	m.name = nil
}

// SetOwnerID sets the "owner_id" field.
func (m *AnnotationNamespaceMutation) SetOwnerID(gi gidx.PrefixedID) {
	m.owner_id = &gi
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *AnnotationNamespaceMutation) OwnerID() (r gidx.PrefixedID, exists bool) {
	v := m.owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the AnnotationNamespace entity.
// If the AnnotationNamespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationNamespaceMutation) OldOwnerID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *AnnotationNamespaceMutation) ResetOwnerID() {
	m.owner_id = nil
}

// SetPrivate sets the "private" field.
func (m *AnnotationNamespaceMutation) SetPrivate(b bool) {
	m.private = &b
}

// Private returns the value of the "private" field in the mutation.
func (m *AnnotationNamespaceMutation) Private() (r bool, exists bool) {
	v := m.private
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivate returns the old "private" field's value of the AnnotationNamespace entity.
// If the AnnotationNamespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationNamespaceMutation) OldPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivate: %w", err)
	}
	return oldValue.Private, nil
}

// ResetPrivate resets all changes to the "private" field.
func (m *AnnotationNamespaceMutation) ResetPrivate() {
	m.private = nil
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by ids.
func (m *AnnotationNamespaceMutation) AddAnnotationIDs(ids ...gidx.PrefixedID) {
	if m.annotations == nil {
		m.annotations = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		m.annotations[ids[i]] = struct{}{}
	}
}

// ClearAnnotations clears the "annotations" edge to the Annotation entity.
func (m *AnnotationNamespaceMutation) ClearAnnotations() {
	m.clearedannotations = true
}

// AnnotationsCleared reports if the "annotations" edge to the Annotation entity was cleared.
func (m *AnnotationNamespaceMutation) AnnotationsCleared() bool {
	return m.clearedannotations
}

// RemoveAnnotationIDs removes the "annotations" edge to the Annotation entity by IDs.
func (m *AnnotationNamespaceMutation) RemoveAnnotationIDs(ids ...gidx.PrefixedID) {
	if m.removedannotations == nil {
		m.removedannotations = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		delete(m.annotations, ids[i])
		m.removedannotations[ids[i]] = struct{}{}
	}
}

// RemovedAnnotations returns the removed IDs of the "annotations" edge to the Annotation entity.
func (m *AnnotationNamespaceMutation) RemovedAnnotationsIDs() (ids []gidx.PrefixedID) {
	for id := range m.removedannotations {
		ids = append(ids, id)
	}
	return
}

// AnnotationsIDs returns the "annotations" edge IDs in the mutation.
func (m *AnnotationNamespaceMutation) AnnotationsIDs() (ids []gidx.PrefixedID) {
	for id := range m.annotations {
		ids = append(ids, id)
	}
	return
}

// ResetAnnotations resets all changes to the "annotations" edge.
func (m *AnnotationNamespaceMutation) ResetAnnotations() {
	m.annotations = nil
	m.clearedannotations = false
	m.removedannotations = nil
}

// Where appends a list predicates to the AnnotationNamespaceMutation builder.
func (m *AnnotationNamespaceMutation) Where(ps ...predicate.AnnotationNamespace) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AnnotationNamespaceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AnnotationNamespaceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AnnotationNamespace, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AnnotationNamespaceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AnnotationNamespaceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AnnotationNamespace).
func (m *AnnotationNamespaceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnnotationNamespaceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, annotationnamespace.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, annotationnamespace.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, annotationnamespace.FieldName)
	}
	if m.owner_id != nil {
		fields = append(fields, annotationnamespace.FieldOwnerID)
	}
	if m.private != nil {
		fields = append(fields, annotationnamespace.FieldPrivate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnnotationNamespaceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case annotationnamespace.FieldCreatedAt:
		return m.CreatedAt()
	case annotationnamespace.FieldUpdatedAt:
		return m.UpdatedAt()
	case annotationnamespace.FieldName:
		return m.Name()
	case annotationnamespace.FieldOwnerID:
		return m.OwnerID()
	case annotationnamespace.FieldPrivate:
		return m.Private()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnnotationNamespaceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case annotationnamespace.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case annotationnamespace.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case annotationnamespace.FieldName:
		return m.OldName(ctx)
	case annotationnamespace.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case annotationnamespace.FieldPrivate:
		return m.OldPrivate(ctx)
	}
	return nil, fmt.Errorf("unknown AnnotationNamespace field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnnotationNamespaceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case annotationnamespace.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case annotationnamespace.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case annotationnamespace.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case annotationnamespace.FieldOwnerID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case annotationnamespace.FieldPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivate(v)
		return nil
	}
	return fmt.Errorf("unknown AnnotationNamespace field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnnotationNamespaceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnnotationNamespaceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnnotationNamespaceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AnnotationNamespace numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnnotationNamespaceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnnotationNamespaceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnnotationNamespaceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AnnotationNamespace nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnnotationNamespaceMutation) ResetField(name string) error {
	switch name {
	case annotationnamespace.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case annotationnamespace.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case annotationnamespace.FieldName:
		m.ResetName()
		return nil
	case annotationnamespace.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case annotationnamespace.FieldPrivate:
		m.ResetPrivate()
		return nil
	}
	return fmt.Errorf("unknown AnnotationNamespace field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnnotationNamespaceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.annotations != nil {
		edges = append(edges, annotationnamespace.EdgeAnnotations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnnotationNamespaceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case annotationnamespace.EdgeAnnotations:
		ids := make([]ent.Value, 0, len(m.annotations))
		for id := range m.annotations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnnotationNamespaceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedannotations != nil {
		edges = append(edges, annotationnamespace.EdgeAnnotations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnnotationNamespaceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case annotationnamespace.EdgeAnnotations:
		ids := make([]ent.Value, 0, len(m.removedannotations))
		for id := range m.removedannotations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnnotationNamespaceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedannotations {
		edges = append(edges, annotationnamespace.EdgeAnnotations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnnotationNamespaceMutation) EdgeCleared(name string) bool {
	switch name {
	case annotationnamespace.EdgeAnnotations:
		return m.clearedannotations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnnotationNamespaceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AnnotationNamespace unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnnotationNamespaceMutation) ResetEdge(name string) error {
	switch name {
	case annotationnamespace.EdgeAnnotations:
		m.ResetAnnotations()
		return nil
	}
	return fmt.Errorf("unknown AnnotationNamespace edge %s", name)
}

// MetadataMutation represents an operation that mutates the Metadata nodes in the graph.
type MetadataMutation struct {
	config
	op                 Op
	typ                string
	id                 *gidx.PrefixedID
	created_at         *time.Time
	updated_at         *time.Time
	node_id            *gidx.PrefixedID
	clearedFields      map[string]struct{}
	annotations        map[gidx.PrefixedID]struct{}
	removedannotations map[gidx.PrefixedID]struct{}
	clearedannotations bool
	statuses           map[gidx.PrefixedID]struct{}
	removedstatuses    map[gidx.PrefixedID]struct{}
	clearedstatuses    bool
	done               bool
	oldValue           func(context.Context) (*Metadata, error)
	predicates         []predicate.Metadata
}

var _ ent.Mutation = (*MetadataMutation)(nil)

// metadataOption allows management of the mutation configuration using functional options.
type metadataOption func(*MetadataMutation)

// newMetadataMutation creates new mutation for the Metadata entity.
func newMetadataMutation(c config, op Op, opts ...metadataOption) *MetadataMutation {
	m := &MetadataMutation{
		config:        c,
		op:            op,
		typ:           TypeMetadata,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMetadataID sets the ID field of the mutation.
func withMetadataID(id gidx.PrefixedID) metadataOption {
	return func(m *MetadataMutation) {
		var (
			err   error
			once  sync.Once
			value *Metadata
		)
		m.oldValue = func(ctx context.Context) (*Metadata, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Metadata.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMetadata sets the old Metadata of the mutation.
func withMetadata(node *Metadata) metadataOption {
	return func(m *MetadataMutation) {
		m.oldValue = func(context.Context) (*Metadata, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MetadataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MetadataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Metadata entities.
func (m *MetadataMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MetadataMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MetadataMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Metadata.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MetadataMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MetadataMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Metadata entity.
// If the Metadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetadataMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MetadataMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MetadataMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MetadataMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Metadata entity.
// If the Metadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetadataMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MetadataMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetNodeID sets the "node_id" field.
func (m *MetadataMutation) SetNodeID(gi gidx.PrefixedID) {
	m.node_id = &gi
}

// NodeID returns the value of the "node_id" field in the mutation.
func (m *MetadataMutation) NodeID() (r gidx.PrefixedID, exists bool) {
	v := m.node_id
	if v == nil {
		return
	}
	return *v, true
}

// OldNodeID returns the old "node_id" field's value of the Metadata entity.
// If the Metadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetadataMutation) OldNodeID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNodeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNodeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNodeID: %w", err)
	}
	return oldValue.NodeID, nil
}

// ResetNodeID resets all changes to the "node_id" field.
func (m *MetadataMutation) ResetNodeID() {
	m.node_id = nil
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by ids.
func (m *MetadataMutation) AddAnnotationIDs(ids ...gidx.PrefixedID) {
	if m.annotations == nil {
		m.annotations = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		m.annotations[ids[i]] = struct{}{}
	}
}

// ClearAnnotations clears the "annotations" edge to the Annotation entity.
func (m *MetadataMutation) ClearAnnotations() {
	m.clearedannotations = true
}

// AnnotationsCleared reports if the "annotations" edge to the Annotation entity was cleared.
func (m *MetadataMutation) AnnotationsCleared() bool {
	return m.clearedannotations
}

// RemoveAnnotationIDs removes the "annotations" edge to the Annotation entity by IDs.
func (m *MetadataMutation) RemoveAnnotationIDs(ids ...gidx.PrefixedID) {
	if m.removedannotations == nil {
		m.removedannotations = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		delete(m.annotations, ids[i])
		m.removedannotations[ids[i]] = struct{}{}
	}
}

// RemovedAnnotations returns the removed IDs of the "annotations" edge to the Annotation entity.
func (m *MetadataMutation) RemovedAnnotationsIDs() (ids []gidx.PrefixedID) {
	for id := range m.removedannotations {
		ids = append(ids, id)
	}
	return
}

// AnnotationsIDs returns the "annotations" edge IDs in the mutation.
func (m *MetadataMutation) AnnotationsIDs() (ids []gidx.PrefixedID) {
	for id := range m.annotations {
		ids = append(ids, id)
	}
	return
}

// ResetAnnotations resets all changes to the "annotations" edge.
func (m *MetadataMutation) ResetAnnotations() {
	m.annotations = nil
	m.clearedannotations = false
	m.removedannotations = nil
}

// AddStatusIDs adds the "statuses" edge to the Status entity by ids.
func (m *MetadataMutation) AddStatusIDs(ids ...gidx.PrefixedID) {
	if m.statuses == nil {
		m.statuses = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		m.statuses[ids[i]] = struct{}{}
	}
}

// ClearStatuses clears the "statuses" edge to the Status entity.
func (m *MetadataMutation) ClearStatuses() {
	m.clearedstatuses = true
}

// StatusesCleared reports if the "statuses" edge to the Status entity was cleared.
func (m *MetadataMutation) StatusesCleared() bool {
	return m.clearedstatuses
}

// RemoveStatusIDs removes the "statuses" edge to the Status entity by IDs.
func (m *MetadataMutation) RemoveStatusIDs(ids ...gidx.PrefixedID) {
	if m.removedstatuses == nil {
		m.removedstatuses = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		delete(m.statuses, ids[i])
		m.removedstatuses[ids[i]] = struct{}{}
	}
}

// RemovedStatuses returns the removed IDs of the "statuses" edge to the Status entity.
func (m *MetadataMutation) RemovedStatusesIDs() (ids []gidx.PrefixedID) {
	for id := range m.removedstatuses {
		ids = append(ids, id)
	}
	return
}

// StatusesIDs returns the "statuses" edge IDs in the mutation.
func (m *MetadataMutation) StatusesIDs() (ids []gidx.PrefixedID) {
	for id := range m.statuses {
		ids = append(ids, id)
	}
	return
}

// ResetStatuses resets all changes to the "statuses" edge.
func (m *MetadataMutation) ResetStatuses() {
	m.statuses = nil
	m.clearedstatuses = false
	m.removedstatuses = nil
}

// Where appends a list predicates to the MetadataMutation builder.
func (m *MetadataMutation) Where(ps ...predicate.Metadata) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MetadataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MetadataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Metadata, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MetadataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MetadataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Metadata).
func (m *MetadataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MetadataMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, metadata.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, metadata.FieldUpdatedAt)
	}
	if m.node_id != nil {
		fields = append(fields, metadata.FieldNodeID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MetadataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case metadata.FieldCreatedAt:
		return m.CreatedAt()
	case metadata.FieldUpdatedAt:
		return m.UpdatedAt()
	case metadata.FieldNodeID:
		return m.NodeID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MetadataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case metadata.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case metadata.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case metadata.FieldNodeID:
		return m.OldNodeID(ctx)
	}
	return nil, fmt.Errorf("unknown Metadata field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MetadataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case metadata.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case metadata.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case metadata.FieldNodeID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNodeID(v)
		return nil
	}
	return fmt.Errorf("unknown Metadata field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MetadataMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MetadataMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MetadataMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Metadata numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MetadataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MetadataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MetadataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Metadata nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MetadataMutation) ResetField(name string) error {
	switch name {
	case metadata.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case metadata.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case metadata.FieldNodeID:
		m.ResetNodeID()
		return nil
	}
	return fmt.Errorf("unknown Metadata field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MetadataMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.annotations != nil {
		edges = append(edges, metadata.EdgeAnnotations)
	}
	if m.statuses != nil {
		edges = append(edges, metadata.EdgeStatuses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MetadataMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case metadata.EdgeAnnotations:
		ids := make([]ent.Value, 0, len(m.annotations))
		for id := range m.annotations {
			ids = append(ids, id)
		}
		return ids
	case metadata.EdgeStatuses:
		ids := make([]ent.Value, 0, len(m.statuses))
		for id := range m.statuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MetadataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedannotations != nil {
		edges = append(edges, metadata.EdgeAnnotations)
	}
	if m.removedstatuses != nil {
		edges = append(edges, metadata.EdgeStatuses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MetadataMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case metadata.EdgeAnnotations:
		ids := make([]ent.Value, 0, len(m.removedannotations))
		for id := range m.removedannotations {
			ids = append(ids, id)
		}
		return ids
	case metadata.EdgeStatuses:
		ids := make([]ent.Value, 0, len(m.removedstatuses))
		for id := range m.removedstatuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MetadataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedannotations {
		edges = append(edges, metadata.EdgeAnnotations)
	}
	if m.clearedstatuses {
		edges = append(edges, metadata.EdgeStatuses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MetadataMutation) EdgeCleared(name string) bool {
	switch name {
	case metadata.EdgeAnnotations:
		return m.clearedannotations
	case metadata.EdgeStatuses:
		return m.clearedstatuses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MetadataMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Metadata unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MetadataMutation) ResetEdge(name string) error {
	switch name {
	case metadata.EdgeAnnotations:
		m.ResetAnnotations()
		return nil
	case metadata.EdgeStatuses:
		m.ResetStatuses()
		return nil
	}
	return fmt.Errorf("unknown Metadata edge %s", name)
}

// StatusMutation represents an operation that mutates the Status nodes in the graph.
type StatusMutation struct {
	config
	op               Op
	typ              string
	id               *gidx.PrefixedID
	created_at       *time.Time
	updated_at       *time.Time
	source           *string
	data             *json.RawMessage
	appenddata       json.RawMessage
	clearedFields    map[string]struct{}
	namespace        *gidx.PrefixedID
	clearednamespace bool
	metadata         *gidx.PrefixedID
	clearedmetadata  bool
	done             bool
	oldValue         func(context.Context) (*Status, error)
	predicates       []predicate.Status
}

var _ ent.Mutation = (*StatusMutation)(nil)

// statusOption allows management of the mutation configuration using functional options.
type statusOption func(*StatusMutation)

// newStatusMutation creates new mutation for the Status entity.
func newStatusMutation(c config, op Op, opts ...statusOption) *StatusMutation {
	m := &StatusMutation{
		config:        c,
		op:            op,
		typ:           TypeStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatusID sets the ID field of the mutation.
func withStatusID(id gidx.PrefixedID) statusOption {
	return func(m *StatusMutation) {
		var (
			err   error
			once  sync.Once
			value *Status
		)
		m.oldValue = func(ctx context.Context) (*Status, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Status.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatus sets the old Status of the mutation.
func withStatus(node *Status) statusOption {
	return func(m *StatusMutation) {
		m.oldValue = func(context.Context) (*Status, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Status entities.
func (m *StatusMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StatusMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StatusMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Status.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *StatusMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StatusMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Status entity.
// If the Status object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StatusMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StatusMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StatusMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Status entity.
// If the Status object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StatusMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetMetadataID sets the "metadata_id" field.
func (m *StatusMutation) SetMetadataID(gi gidx.PrefixedID) {
	m.metadata = &gi
}

// MetadataID returns the value of the "metadata_id" field in the mutation.
func (m *StatusMutation) MetadataID() (r gidx.PrefixedID, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadataID returns the old "metadata_id" field's value of the Status entity.
// If the Status object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusMutation) OldMetadataID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadataID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadataID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadataID: %w", err)
	}
	return oldValue.MetadataID, nil
}

// ResetMetadataID resets all changes to the "metadata_id" field.
func (m *StatusMutation) ResetMetadataID() {
	m.metadata = nil
}

// SetStatusNamespaceID sets the "status_namespace_id" field.
func (m *StatusMutation) SetStatusNamespaceID(gi gidx.PrefixedID) {
	m.namespace = &gi
}

// StatusNamespaceID returns the value of the "status_namespace_id" field in the mutation.
func (m *StatusMutation) StatusNamespaceID() (r gidx.PrefixedID, exists bool) {
	v := m.namespace
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusNamespaceID returns the old "status_namespace_id" field's value of the Status entity.
// If the Status object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusMutation) OldStatusNamespaceID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatusNamespaceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatusNamespaceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusNamespaceID: %w", err)
	}
	return oldValue.StatusNamespaceID, nil
}

// ResetStatusNamespaceID resets all changes to the "status_namespace_id" field.
func (m *StatusMutation) ResetStatusNamespaceID() {
	m.namespace = nil
}

// SetSource sets the "source" field.
func (m *StatusMutation) SetSource(s string) {
	m.source = &s
}

// Source returns the value of the "source" field in the mutation.
func (m *StatusMutation) Source() (r string, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the Status entity.
// If the Status object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusMutation) OldSource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ResetSource resets all changes to the "source" field.
func (m *StatusMutation) ResetSource() {
	m.source = nil
}

// SetData sets the "data" field.
func (m *StatusMutation) SetData(jm json.RawMessage) {
	m.data = &jm
	m.appenddata = nil
}

// Data returns the value of the "data" field in the mutation.
func (m *StatusMutation) Data() (r json.RawMessage, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Status entity.
// If the Status object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusMutation) OldData(ctx context.Context) (v json.RawMessage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// AppendData adds jm to the "data" field.
func (m *StatusMutation) AppendData(jm json.RawMessage) {
	m.appenddata = append(m.appenddata, jm...)
}

// AppendedData returns the list of values that were appended to the "data" field in this mutation.
func (m *StatusMutation) AppendedData() (json.RawMessage, bool) {
	if len(m.appenddata) == 0 {
		return nil, false
	}
	return m.appenddata, true
}

// ResetData resets all changes to the "data" field.
func (m *StatusMutation) ResetData() {
	m.data = nil
	m.appenddata = nil
}

// SetNamespaceID sets the "namespace" edge to the StatusNamespace entity by id.
func (m *StatusMutation) SetNamespaceID(id gidx.PrefixedID) {
	m.namespace = &id
}

// ClearNamespace clears the "namespace" edge to the StatusNamespace entity.
func (m *StatusMutation) ClearNamespace() {
	m.clearednamespace = true
}

// NamespaceCleared reports if the "namespace" edge to the StatusNamespace entity was cleared.
func (m *StatusMutation) NamespaceCleared() bool {
	return m.clearednamespace
}

// NamespaceID returns the "namespace" edge ID in the mutation.
func (m *StatusMutation) NamespaceID() (id gidx.PrefixedID, exists bool) {
	if m.namespace != nil {
		return *m.namespace, true
	}
	return
}

// NamespaceIDs returns the "namespace" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NamespaceID instead. It exists only for internal usage by the builders.
func (m *StatusMutation) NamespaceIDs() (ids []gidx.PrefixedID) {
	if id := m.namespace; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNamespace resets all changes to the "namespace" edge.
func (m *StatusMutation) ResetNamespace() {
	m.namespace = nil
	m.clearednamespace = false
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (m *StatusMutation) ClearMetadata() {
	m.clearedmetadata = true
}

// MetadataCleared reports if the "metadata" edge to the Metadata entity was cleared.
func (m *StatusMutation) MetadataCleared() bool {
	return m.clearedmetadata
}

// MetadataIDs returns the "metadata" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MetadataID instead. It exists only for internal usage by the builders.
func (m *StatusMutation) MetadataIDs() (ids []gidx.PrefixedID) {
	if id := m.metadata; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMetadata resets all changes to the "metadata" edge.
func (m *StatusMutation) ResetMetadata() {
	m.metadata = nil
	m.clearedmetadata = false
}

// Where appends a list predicates to the StatusMutation builder.
func (m *StatusMutation) Where(ps ...predicate.Status) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StatusMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StatusMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Status, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StatusMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StatusMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Status).
func (m *StatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StatusMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, status.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, status.FieldUpdatedAt)
	}
	if m.metadata != nil {
		fields = append(fields, status.FieldMetadataID)
	}
	if m.namespace != nil {
		fields = append(fields, status.FieldStatusNamespaceID)
	}
	if m.source != nil {
		fields = append(fields, status.FieldSource)
	}
	if m.data != nil {
		fields = append(fields, status.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case status.FieldCreatedAt:
		return m.CreatedAt()
	case status.FieldUpdatedAt:
		return m.UpdatedAt()
	case status.FieldMetadataID:
		return m.MetadataID()
	case status.FieldStatusNamespaceID:
		return m.StatusNamespaceID()
	case status.FieldSource:
		return m.Source()
	case status.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case status.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case status.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case status.FieldMetadataID:
		return m.OldMetadataID(ctx)
	case status.FieldStatusNamespaceID:
		return m.OldStatusNamespaceID(ctx)
	case status.FieldSource:
		return m.OldSource(ctx)
	case status.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown Status field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case status.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case status.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case status.FieldMetadataID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadataID(v)
		return nil
	case status.FieldStatusNamespaceID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusNamespaceID(v)
		return nil
	case status.FieldSource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	case status.FieldData:
		v, ok := value.(json.RawMessage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown Status field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Status numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Status nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StatusMutation) ResetField(name string) error {
	switch name {
	case status.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case status.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case status.FieldMetadataID:
		m.ResetMetadataID()
		return nil
	case status.FieldStatusNamespaceID:
		m.ResetStatusNamespaceID()
		return nil
	case status.FieldSource:
		m.ResetSource()
		return nil
	case status.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown Status field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.namespace != nil {
		edges = append(edges, status.EdgeNamespace)
	}
	if m.metadata != nil {
		edges = append(edges, status.EdgeMetadata)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case status.EdgeNamespace:
		if id := m.namespace; id != nil {
			return []ent.Value{*id}
		}
	case status.EdgeMetadata:
		if id := m.metadata; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StatusMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearednamespace {
		edges = append(edges, status.EdgeNamespace)
	}
	if m.clearedmetadata {
		edges = append(edges, status.EdgeMetadata)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StatusMutation) EdgeCleared(name string) bool {
	switch name {
	case status.EdgeNamespace:
		return m.clearednamespace
	case status.EdgeMetadata:
		return m.clearedmetadata
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StatusMutation) ClearEdge(name string) error {
	switch name {
	case status.EdgeNamespace:
		m.ClearNamespace()
		return nil
	case status.EdgeMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown Status unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StatusMutation) ResetEdge(name string) error {
	switch name {
	case status.EdgeNamespace:
		m.ResetNamespace()
		return nil
	case status.EdgeMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Status edge %s", name)
}

// StatusNamespaceMutation represents an operation that mutates the StatusNamespace nodes in the graph.
type StatusNamespaceMutation struct {
	config
	op                   Op
	typ                  string
	id                   *gidx.PrefixedID
	created_at           *time.Time
	updated_at           *time.Time
	name                 *string
	resource_provider_id *gidx.PrefixedID
	private              *bool
	clearedFields        map[string]struct{}
	statuses             map[gidx.PrefixedID]struct{}
	removedstatuses      map[gidx.PrefixedID]struct{}
	clearedstatuses      bool
	done                 bool
	oldValue             func(context.Context) (*StatusNamespace, error)
	predicates           []predicate.StatusNamespace
}

var _ ent.Mutation = (*StatusNamespaceMutation)(nil)

// statusnamespaceOption allows management of the mutation configuration using functional options.
type statusnamespaceOption func(*StatusNamespaceMutation)

// newStatusNamespaceMutation creates new mutation for the StatusNamespace entity.
func newStatusNamespaceMutation(c config, op Op, opts ...statusnamespaceOption) *StatusNamespaceMutation {
	m := &StatusNamespaceMutation{
		config:        c,
		op:            op,
		typ:           TypeStatusNamespace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatusNamespaceID sets the ID field of the mutation.
func withStatusNamespaceID(id gidx.PrefixedID) statusnamespaceOption {
	return func(m *StatusNamespaceMutation) {
		var (
			err   error
			once  sync.Once
			value *StatusNamespace
		)
		m.oldValue = func(ctx context.Context) (*StatusNamespace, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StatusNamespace.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatusNamespace sets the old StatusNamespace of the mutation.
func withStatusNamespace(node *StatusNamespace) statusnamespaceOption {
	return func(m *StatusNamespaceMutation) {
		m.oldValue = func(context.Context) (*StatusNamespace, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatusNamespaceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatusNamespaceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StatusNamespace entities.
func (m *StatusNamespaceMutation) SetID(id gidx.PrefixedID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StatusNamespaceMutation) ID() (id gidx.PrefixedID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StatusNamespaceMutation) IDs(ctx context.Context) ([]gidx.PrefixedID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []gidx.PrefixedID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StatusNamespace.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *StatusNamespaceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StatusNamespaceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the StatusNamespace entity.
// If the StatusNamespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusNamespaceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StatusNamespaceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StatusNamespaceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StatusNamespaceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the StatusNamespace entity.
// If the StatusNamespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusNamespaceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StatusNamespaceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *StatusNamespaceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StatusNamespaceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the StatusNamespace entity.
// If the StatusNamespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusNamespaceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StatusNamespaceMutation) ResetName() {
	m.name = nil
}

// SetResourceProviderID sets the "resource_provider_id" field.
func (m *StatusNamespaceMutation) SetResourceProviderID(gi gidx.PrefixedID) {
	m.resource_provider_id = &gi
}

// ResourceProviderID returns the value of the "resource_provider_id" field in the mutation.
func (m *StatusNamespaceMutation) ResourceProviderID() (r gidx.PrefixedID, exists bool) {
	v := m.resource_provider_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceProviderID returns the old "resource_provider_id" field's value of the StatusNamespace entity.
// If the StatusNamespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusNamespaceMutation) OldResourceProviderID(ctx context.Context) (v gidx.PrefixedID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceProviderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceProviderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceProviderID: %w", err)
	}
	return oldValue.ResourceProviderID, nil
}

// ResetResourceProviderID resets all changes to the "resource_provider_id" field.
func (m *StatusNamespaceMutation) ResetResourceProviderID() {
	m.resource_provider_id = nil
}

// SetPrivate sets the "private" field.
func (m *StatusNamespaceMutation) SetPrivate(b bool) {
	m.private = &b
}

// Private returns the value of the "private" field in the mutation.
func (m *StatusNamespaceMutation) Private() (r bool, exists bool) {
	v := m.private
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivate returns the old "private" field's value of the StatusNamespace entity.
// If the StatusNamespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusNamespaceMutation) OldPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivate: %w", err)
	}
	return oldValue.Private, nil
}

// ResetPrivate resets all changes to the "private" field.
func (m *StatusNamespaceMutation) ResetPrivate() {
	m.private = nil
}

// AddStatusIDs adds the "statuses" edge to the Status entity by ids.
func (m *StatusNamespaceMutation) AddStatusIDs(ids ...gidx.PrefixedID) {
	if m.statuses == nil {
		m.statuses = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		m.statuses[ids[i]] = struct{}{}
	}
}

// ClearStatuses clears the "statuses" edge to the Status entity.
func (m *StatusNamespaceMutation) ClearStatuses() {
	m.clearedstatuses = true
}

// StatusesCleared reports if the "statuses" edge to the Status entity was cleared.
func (m *StatusNamespaceMutation) StatusesCleared() bool {
	return m.clearedstatuses
}

// RemoveStatusIDs removes the "statuses" edge to the Status entity by IDs.
func (m *StatusNamespaceMutation) RemoveStatusIDs(ids ...gidx.PrefixedID) {
	if m.removedstatuses == nil {
		m.removedstatuses = make(map[gidx.PrefixedID]struct{})
	}
	for i := range ids {
		delete(m.statuses, ids[i])
		m.removedstatuses[ids[i]] = struct{}{}
	}
}

// RemovedStatuses returns the removed IDs of the "statuses" edge to the Status entity.
func (m *StatusNamespaceMutation) RemovedStatusesIDs() (ids []gidx.PrefixedID) {
	for id := range m.removedstatuses {
		ids = append(ids, id)
	}
	return
}

// StatusesIDs returns the "statuses" edge IDs in the mutation.
func (m *StatusNamespaceMutation) StatusesIDs() (ids []gidx.PrefixedID) {
	for id := range m.statuses {
		ids = append(ids, id)
	}
	return
}

// ResetStatuses resets all changes to the "statuses" edge.
func (m *StatusNamespaceMutation) ResetStatuses() {
	m.statuses = nil
	m.clearedstatuses = false
	m.removedstatuses = nil
}

// Where appends a list predicates to the StatusNamespaceMutation builder.
func (m *StatusNamespaceMutation) Where(ps ...predicate.StatusNamespace) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StatusNamespaceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StatusNamespaceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StatusNamespace, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StatusNamespaceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StatusNamespaceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StatusNamespace).
func (m *StatusNamespaceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StatusNamespaceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, statusnamespace.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, statusnamespace.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, statusnamespace.FieldName)
	}
	if m.resource_provider_id != nil {
		fields = append(fields, statusnamespace.FieldResourceProviderID)
	}
	if m.private != nil {
		fields = append(fields, statusnamespace.FieldPrivate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StatusNamespaceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case statusnamespace.FieldCreatedAt:
		return m.CreatedAt()
	case statusnamespace.FieldUpdatedAt:
		return m.UpdatedAt()
	case statusnamespace.FieldName:
		return m.Name()
	case statusnamespace.FieldResourceProviderID:
		return m.ResourceProviderID()
	case statusnamespace.FieldPrivate:
		return m.Private()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StatusNamespaceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case statusnamespace.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case statusnamespace.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case statusnamespace.FieldName:
		return m.OldName(ctx)
	case statusnamespace.FieldResourceProviderID:
		return m.OldResourceProviderID(ctx)
	case statusnamespace.FieldPrivate:
		return m.OldPrivate(ctx)
	}
	return nil, fmt.Errorf("unknown StatusNamespace field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatusNamespaceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case statusnamespace.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case statusnamespace.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case statusnamespace.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case statusnamespace.FieldResourceProviderID:
		v, ok := value.(gidx.PrefixedID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceProviderID(v)
		return nil
	case statusnamespace.FieldPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivate(v)
		return nil
	}
	return fmt.Errorf("unknown StatusNamespace field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StatusNamespaceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StatusNamespaceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatusNamespaceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StatusNamespace numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StatusNamespaceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StatusNamespaceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatusNamespaceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StatusNamespace nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StatusNamespaceMutation) ResetField(name string) error {
	switch name {
	case statusnamespace.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case statusnamespace.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case statusnamespace.FieldName:
		m.ResetName()
		return nil
	case statusnamespace.FieldResourceProviderID:
		m.ResetResourceProviderID()
		return nil
	case statusnamespace.FieldPrivate:
		m.ResetPrivate()
		return nil
	}
	return fmt.Errorf("unknown StatusNamespace field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StatusNamespaceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.statuses != nil {
		edges = append(edges, statusnamespace.EdgeStatuses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StatusNamespaceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case statusnamespace.EdgeStatuses:
		ids := make([]ent.Value, 0, len(m.statuses))
		for id := range m.statuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StatusNamespaceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstatuses != nil {
		edges = append(edges, statusnamespace.EdgeStatuses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StatusNamespaceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case statusnamespace.EdgeStatuses:
		ids := make([]ent.Value, 0, len(m.removedstatuses))
		for id := range m.removedstatuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StatusNamespaceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstatuses {
		edges = append(edges, statusnamespace.EdgeStatuses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StatusNamespaceMutation) EdgeCleared(name string) bool {
	switch name {
	case statusnamespace.EdgeStatuses:
		return m.clearedstatuses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StatusNamespaceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown StatusNamespace unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StatusNamespaceMutation) ResetEdge(name string) error {
	switch name {
	case statusnamespace.EdgeStatuses:
		m.ResetStatuses()
		return nil
	}
	return fmt.Errorf("unknown StatusNamespace edge %s", name)
}
