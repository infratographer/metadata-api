// Copyright Infratographer, Inc. and/or licensed to Infratographer, Inc. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.
//
// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AnnotationsColumns holds the columns for the "annotations" table.
	AnnotationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "json_data", Type: field.TypeJSON},
		{Name: "annotation_namespace_id", Type: field.TypeString},
		{Name: "metadata_id", Type: field.TypeString},
	}
	// AnnotationsTable holds the schema information for the "annotations" table.
	AnnotationsTable = &schema.Table{
		Name:       "annotations",
		Columns:    AnnotationsColumns,
		PrimaryKey: []*schema.Column{AnnotationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "annotations_annotation_namespaces_namespace",
				Columns:    []*schema.Column{AnnotationsColumns[4]},
				RefColumns: []*schema.Column{AnnotationNamespacesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "annotations_metadata_metadata",
				Columns:    []*schema.Column{AnnotationsColumns[5]},
				RefColumns: []*schema.Column{MetadataColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "annotation_created_at",
				Unique:  false,
				Columns: []*schema.Column{AnnotationsColumns[1]},
			},
			{
				Name:    "annotation_updated_at",
				Unique:  false,
				Columns: []*schema.Column{AnnotationsColumns[2]},
			},
			{
				Name:    "annotation_metadata_id_annotation_namespace_id",
				Unique:  true,
				Columns: []*schema.Column{AnnotationsColumns[5], AnnotationsColumns[4]},
			},
			{
				Name:    "annotation_annotation_namespace_id_json_data",
				Unique:  false,
				Columns: []*schema.Column{AnnotationsColumns[4], AnnotationsColumns[3]},
				Annotation: &entsql.IndexAnnotation{
					Types: map[string]string{
						"postgres": "GIN",
					},
				},
			},
		},
	}
	// AnnotationNamespacesColumns holds the columns for the "annotation_namespaces" table.
	AnnotationNamespacesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "owner_id", Type: field.TypeString},
		{Name: "private", Type: field.TypeBool, Default: false},
	}
	// AnnotationNamespacesTable holds the schema information for the "annotation_namespaces" table.
	AnnotationNamespacesTable = &schema.Table{
		Name:       "annotation_namespaces",
		Columns:    AnnotationNamespacesColumns,
		PrimaryKey: []*schema.Column{AnnotationNamespacesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "annotationnamespace_created_at",
				Unique:  false,
				Columns: []*schema.Column{AnnotationNamespacesColumns[1]},
			},
			{
				Name:    "annotationnamespace_updated_at",
				Unique:  false,
				Columns: []*schema.Column{AnnotationNamespacesColumns[2]},
			},
			{
				Name:    "annotationnamespace_owner_id",
				Unique:  false,
				Columns: []*schema.Column{AnnotationNamespacesColumns[4]},
			},
			{
				Name:    "annotationnamespace_owner_id_name",
				Unique:  true,
				Columns: []*schema.Column{AnnotationNamespacesColumns[4], AnnotationNamespacesColumns[3]},
			},
		},
	}
	// MetadataColumns holds the columns for the "metadata" table.
	MetadataColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "node_id", Type: field.TypeString, Unique: true},
	}
	// MetadataTable holds the schema information for the "metadata" table.
	MetadataTable = &schema.Table{
		Name:       "metadata",
		Columns:    MetadataColumns,
		PrimaryKey: []*schema.Column{MetadataColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "metadata_created_at",
				Unique:  false,
				Columns: []*schema.Column{MetadataColumns[1]},
			},
			{
				Name:    "metadata_updated_at",
				Unique:  false,
				Columns: []*schema.Column{MetadataColumns[2]},
			},
		},
	}
	// StatusColumns holds the columns for the "status" table.
	StatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "source", Type: field.TypeString},
		{Name: "json_data", Type: field.TypeJSON},
		{Name: "status_namespace_id", Type: field.TypeString},
		{Name: "metadata_id", Type: field.TypeString},
	}
	// StatusTable holds the schema information for the "status" table.
	StatusTable = &schema.Table{
		Name:       "status",
		Columns:    StatusColumns,
		PrimaryKey: []*schema.Column{StatusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "status_status_namespaces_namespace",
				Columns:    []*schema.Column{StatusColumns[5]},
				RefColumns: []*schema.Column{StatusNamespacesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "status_metadata_metadata",
				Columns:    []*schema.Column{StatusColumns[6]},
				RefColumns: []*schema.Column{MetadataColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "status_created_at",
				Unique:  false,
				Columns: []*schema.Column{StatusColumns[1]},
			},
			{
				Name:    "status_updated_at",
				Unique:  false,
				Columns: []*schema.Column{StatusColumns[2]},
			},
			{
				Name:    "status_metadata_id_status_namespace_id",
				Unique:  false,
				Columns: []*schema.Column{StatusColumns[6], StatusColumns[5]},
			},
			{
				Name:    "status_metadata_id_status_namespace_id_source",
				Unique:  true,
				Columns: []*schema.Column{StatusColumns[6], StatusColumns[5], StatusColumns[3]},
			},
			{
				Name:    "status_status_namespace_id_json_data",
				Unique:  false,
				Columns: []*schema.Column{StatusColumns[5], StatusColumns[4]},
				Annotation: &entsql.IndexAnnotation{
					Types: map[string]string{
						"postgres": "GIN",
					},
				},
			},
		},
	}
	// StatusNamespacesColumns holds the columns for the "status_namespaces" table.
	StatusNamespacesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "resource_provider_id", Type: field.TypeString},
		{Name: "private", Type: field.TypeBool, Default: false},
	}
	// StatusNamespacesTable holds the schema information for the "status_namespaces" table.
	StatusNamespacesTable = &schema.Table{
		Name:       "status_namespaces",
		Columns:    StatusNamespacesColumns,
		PrimaryKey: []*schema.Column{StatusNamespacesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "statusnamespace_created_at",
				Unique:  false,
				Columns: []*schema.Column{StatusNamespacesColumns[1]},
			},
			{
				Name:    "statusnamespace_updated_at",
				Unique:  false,
				Columns: []*schema.Column{StatusNamespacesColumns[2]},
			},
			{
				Name:    "statusnamespace_resource_provider_id",
				Unique:  false,
				Columns: []*schema.Column{StatusNamespacesColumns[4]},
			},
			{
				Name:    "statusnamespace_resource_provider_id_name",
				Unique:  true,
				Columns: []*schema.Column{StatusNamespacesColumns[4], StatusNamespacesColumns[3]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AnnotationsTable,
		AnnotationNamespacesTable,
		MetadataTable,
		StatusTable,
		StatusNamespacesTable,
	}
)

func init() {
	AnnotationsTable.ForeignKeys[0].RefTable = AnnotationNamespacesTable
	AnnotationsTable.ForeignKeys[1].RefTable = MetadataTable
	StatusTable.ForeignKeys[0].RefTable = StatusNamespacesTable
	StatusTable.ForeignKeys[1].RefTable = MetadataTable
}
