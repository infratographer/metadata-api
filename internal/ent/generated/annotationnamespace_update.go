// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/metadata-api/internal/ent/generated/annotation"
	"go.infratographer.com/metadata-api/internal/ent/generated/annotationnamespace"
	"go.infratographer.com/metadata-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// AnnotationNamespaceUpdate is the builder for updating AnnotationNamespace entities.
type AnnotationNamespaceUpdate struct {
	config
	hooks    []Hook
	mutation *AnnotationNamespaceMutation
}

// Where appends a list predicates to the AnnotationNamespaceUpdate builder.
func (anu *AnnotationNamespaceUpdate) Where(ps ...predicate.AnnotationNamespace) *AnnotationNamespaceUpdate {
	anu.mutation.Where(ps...)
	return anu
}

// SetName sets the "name" field.
func (anu *AnnotationNamespaceUpdate) SetName(s string) *AnnotationNamespaceUpdate {
	anu.mutation.SetName(s)
	return anu
}

// SetPrivate sets the "private" field.
func (anu *AnnotationNamespaceUpdate) SetPrivate(b bool) *AnnotationNamespaceUpdate {
	anu.mutation.SetPrivate(b)
	return anu
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (anu *AnnotationNamespaceUpdate) SetNillablePrivate(b *bool) *AnnotationNamespaceUpdate {
	if b != nil {
		anu.SetPrivate(*b)
	}
	return anu
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by IDs.
func (anu *AnnotationNamespaceUpdate) AddAnnotationIDs(ids ...gidx.PrefixedID) *AnnotationNamespaceUpdate {
	anu.mutation.AddAnnotationIDs(ids...)
	return anu
}

// AddAnnotations adds the "annotations" edges to the Annotation entity.
func (anu *AnnotationNamespaceUpdate) AddAnnotations(a ...*Annotation) *AnnotationNamespaceUpdate {
	ids := make([]gidx.PrefixedID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return anu.AddAnnotationIDs(ids...)
}

// Mutation returns the AnnotationNamespaceMutation object of the builder.
func (anu *AnnotationNamespaceUpdate) Mutation() *AnnotationNamespaceMutation {
	return anu.mutation
}

// ClearAnnotations clears all "annotations" edges to the Annotation entity.
func (anu *AnnotationNamespaceUpdate) ClearAnnotations() *AnnotationNamespaceUpdate {
	anu.mutation.ClearAnnotations()
	return anu
}

// RemoveAnnotationIDs removes the "annotations" edge to Annotation entities by IDs.
func (anu *AnnotationNamespaceUpdate) RemoveAnnotationIDs(ids ...gidx.PrefixedID) *AnnotationNamespaceUpdate {
	anu.mutation.RemoveAnnotationIDs(ids...)
	return anu
}

// RemoveAnnotations removes "annotations" edges to Annotation entities.
func (anu *AnnotationNamespaceUpdate) RemoveAnnotations(a ...*Annotation) *AnnotationNamespaceUpdate {
	ids := make([]gidx.PrefixedID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return anu.RemoveAnnotationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (anu *AnnotationNamespaceUpdate) Save(ctx context.Context) (int, error) {
	anu.defaults()
	return withHooks(ctx, anu.sqlSave, anu.mutation, anu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (anu *AnnotationNamespaceUpdate) SaveX(ctx context.Context) int {
	affected, err := anu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (anu *AnnotationNamespaceUpdate) Exec(ctx context.Context) error {
	_, err := anu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anu *AnnotationNamespaceUpdate) ExecX(ctx context.Context) {
	if err := anu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (anu *AnnotationNamespaceUpdate) defaults() {
	if _, ok := anu.mutation.UpdatedAt(); !ok {
		v := annotationnamespace.UpdateDefaultUpdatedAt()
		anu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anu *AnnotationNamespaceUpdate) check() error {
	if v, ok := anu.mutation.Name(); ok {
		if err := annotationnamespace.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "AnnotationNamespace.name": %w`, err)}
		}
	}
	return nil
}

func (anu *AnnotationNamespaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := anu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(annotationnamespace.Table, annotationnamespace.Columns, sqlgraph.NewFieldSpec(annotationnamespace.FieldID, field.TypeString))
	if ps := anu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := anu.mutation.UpdatedAt(); ok {
		_spec.SetField(annotationnamespace.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := anu.mutation.Name(); ok {
		_spec.SetField(annotationnamespace.FieldName, field.TypeString, value)
	}
	if value, ok := anu.mutation.Private(); ok {
		_spec.SetField(annotationnamespace.FieldPrivate, field.TypeBool, value)
	}
	if anu.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   annotationnamespace.AnnotationsTable,
			Columns: []string{annotationnamespace.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := anu.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !anu.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   annotationnamespace.AnnotationsTable,
			Columns: []string{annotationnamespace.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := anu.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   annotationnamespace.AnnotationsTable,
			Columns: []string{annotationnamespace.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, anu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{annotationnamespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	anu.mutation.done = true
	return n, nil
}

// AnnotationNamespaceUpdateOne is the builder for updating a single AnnotationNamespace entity.
type AnnotationNamespaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnnotationNamespaceMutation
}

// SetName sets the "name" field.
func (anuo *AnnotationNamespaceUpdateOne) SetName(s string) *AnnotationNamespaceUpdateOne {
	anuo.mutation.SetName(s)
	return anuo
}

// SetPrivate sets the "private" field.
func (anuo *AnnotationNamespaceUpdateOne) SetPrivate(b bool) *AnnotationNamespaceUpdateOne {
	anuo.mutation.SetPrivate(b)
	return anuo
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (anuo *AnnotationNamespaceUpdateOne) SetNillablePrivate(b *bool) *AnnotationNamespaceUpdateOne {
	if b != nil {
		anuo.SetPrivate(*b)
	}
	return anuo
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by IDs.
func (anuo *AnnotationNamespaceUpdateOne) AddAnnotationIDs(ids ...gidx.PrefixedID) *AnnotationNamespaceUpdateOne {
	anuo.mutation.AddAnnotationIDs(ids...)
	return anuo
}

// AddAnnotations adds the "annotations" edges to the Annotation entity.
func (anuo *AnnotationNamespaceUpdateOne) AddAnnotations(a ...*Annotation) *AnnotationNamespaceUpdateOne {
	ids := make([]gidx.PrefixedID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return anuo.AddAnnotationIDs(ids...)
}

// Mutation returns the AnnotationNamespaceMutation object of the builder.
func (anuo *AnnotationNamespaceUpdateOne) Mutation() *AnnotationNamespaceMutation {
	return anuo.mutation
}

// ClearAnnotations clears all "annotations" edges to the Annotation entity.
func (anuo *AnnotationNamespaceUpdateOne) ClearAnnotations() *AnnotationNamespaceUpdateOne {
	anuo.mutation.ClearAnnotations()
	return anuo
}

// RemoveAnnotationIDs removes the "annotations" edge to Annotation entities by IDs.
func (anuo *AnnotationNamespaceUpdateOne) RemoveAnnotationIDs(ids ...gidx.PrefixedID) *AnnotationNamespaceUpdateOne {
	anuo.mutation.RemoveAnnotationIDs(ids...)
	return anuo
}

// RemoveAnnotations removes "annotations" edges to Annotation entities.
func (anuo *AnnotationNamespaceUpdateOne) RemoveAnnotations(a ...*Annotation) *AnnotationNamespaceUpdateOne {
	ids := make([]gidx.PrefixedID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return anuo.RemoveAnnotationIDs(ids...)
}

// Where appends a list predicates to the AnnotationNamespaceUpdate builder.
func (anuo *AnnotationNamespaceUpdateOne) Where(ps ...predicate.AnnotationNamespace) *AnnotationNamespaceUpdateOne {
	anuo.mutation.Where(ps...)
	return anuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (anuo *AnnotationNamespaceUpdateOne) Select(field string, fields ...string) *AnnotationNamespaceUpdateOne {
	anuo.fields = append([]string{field}, fields...)
	return anuo
}

// Save executes the query and returns the updated AnnotationNamespace entity.
func (anuo *AnnotationNamespaceUpdateOne) Save(ctx context.Context) (*AnnotationNamespace, error) {
	anuo.defaults()
	return withHooks(ctx, anuo.sqlSave, anuo.mutation, anuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (anuo *AnnotationNamespaceUpdateOne) SaveX(ctx context.Context) *AnnotationNamespace {
	node, err := anuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (anuo *AnnotationNamespaceUpdateOne) Exec(ctx context.Context) error {
	_, err := anuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anuo *AnnotationNamespaceUpdateOne) ExecX(ctx context.Context) {
	if err := anuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (anuo *AnnotationNamespaceUpdateOne) defaults() {
	if _, ok := anuo.mutation.UpdatedAt(); !ok {
		v := annotationnamespace.UpdateDefaultUpdatedAt()
		anuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anuo *AnnotationNamespaceUpdateOne) check() error {
	if v, ok := anuo.mutation.Name(); ok {
		if err := annotationnamespace.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "AnnotationNamespace.name": %w`, err)}
		}
	}
	return nil
}

func (anuo *AnnotationNamespaceUpdateOne) sqlSave(ctx context.Context) (_node *AnnotationNamespace, err error) {
	if err := anuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(annotationnamespace.Table, annotationnamespace.Columns, sqlgraph.NewFieldSpec(annotationnamespace.FieldID, field.TypeString))
	id, ok := anuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AnnotationNamespace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := anuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, annotationnamespace.FieldID)
		for _, f := range fields {
			if !annotationnamespace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != annotationnamespace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := anuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := anuo.mutation.UpdatedAt(); ok {
		_spec.SetField(annotationnamespace.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := anuo.mutation.Name(); ok {
		_spec.SetField(annotationnamespace.FieldName, field.TypeString, value)
	}
	if value, ok := anuo.mutation.Private(); ok {
		_spec.SetField(annotationnamespace.FieldPrivate, field.TypeBool, value)
	}
	if anuo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   annotationnamespace.AnnotationsTable,
			Columns: []string{annotationnamespace.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := anuo.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !anuo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   annotationnamespace.AnnotationsTable,
			Columns: []string{annotationnamespace.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := anuo.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   annotationnamespace.AnnotationsTable,
			Columns: []string{annotationnamespace.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AnnotationNamespace{config: anuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, anuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{annotationnamespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	anuo.mutation.done = true
	return _node, nil
}
