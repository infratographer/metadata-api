// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"go.infratographer.com/metadata-api/internal/ent/generated/annotation"
	"go.infratographer.com/metadata-api/internal/ent/generated/annotationnamespace"
	"go.infratographer.com/metadata-api/internal/ent/generated/metadata"
	"go.infratographer.com/metadata-api/internal/ent/generated/status"
	"go.infratographer.com/metadata-api/internal/ent/generated/statusnamespace"
	"go.infratographer.com/x/gidx"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[gidx.PrefixedID]
	PageInfo       = entgql.PageInfo[gidx.PrefixedID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AnnotationEdge is the edge representation of Annotation.
type AnnotationEdge struct {
	Node   *Annotation `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// AnnotationConnection is the connection containing edges to Annotation.
type AnnotationConnection struct {
	Edges      []*AnnotationEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *AnnotationConnection) build(nodes []*Annotation, pager *annotationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Annotation
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Annotation {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Annotation {
			return nodes[i]
		}
	}
	c.Edges = make([]*AnnotationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AnnotationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AnnotationPaginateOption enables pagination customization.
type AnnotationPaginateOption func(*annotationPager) error

// WithAnnotationOrder configures pagination ordering.
func WithAnnotationOrder(order *AnnotationOrder) AnnotationPaginateOption {
	if order == nil {
		order = DefaultAnnotationOrder
	}
	o := *order
	return func(pager *annotationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAnnotationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAnnotationFilter configures pagination filter.
func WithAnnotationFilter(filter func(*AnnotationQuery) (*AnnotationQuery, error)) AnnotationPaginateOption {
	return func(pager *annotationPager) error {
		if filter == nil {
			return errors.New("AnnotationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type annotationPager struct {
	reverse bool
	order   *AnnotationOrder
	filter  func(*AnnotationQuery) (*AnnotationQuery, error)
}

func newAnnotationPager(opts []AnnotationPaginateOption, reverse bool) (*annotationPager, error) {
	pager := &annotationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAnnotationOrder
	}
	return pager, nil
}

func (p *annotationPager) applyFilter(query *AnnotationQuery) (*AnnotationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *annotationPager) toCursor(a *Annotation) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *annotationPager) applyCursors(query *AnnotationQuery, after, before *Cursor) (*AnnotationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAnnotationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *annotationPager) applyOrder(query *AnnotationQuery) *AnnotationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAnnotationOrder.Field {
		query = query.Order(DefaultAnnotationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *annotationPager) orderExpr(query *AnnotationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAnnotationOrder.Field {
			b.Comma().Ident(DefaultAnnotationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Annotation.
func (a *AnnotationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AnnotationPaginateOption,
) (*AnnotationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAnnotationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AnnotationConnection{Edges: []*AnnotationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AnnotationOrderFieldCreatedAt orders Annotation by created_at.
	AnnotationOrderFieldCreatedAt = &AnnotationOrderField{
		Value: func(a *Annotation) (ent.Value, error) {
			return a.CreatedAt, nil
		},
		column: annotation.FieldCreatedAt,
		toTerm: annotation.ByCreatedAt,
		toCursor: func(a *Annotation) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.CreatedAt,
			}
		},
	}
	// AnnotationOrderFieldUpdatedAt orders Annotation by updated_at.
	AnnotationOrderFieldUpdatedAt = &AnnotationOrderField{
		Value: func(a *Annotation) (ent.Value, error) {
			return a.UpdatedAt, nil
		},
		column: annotation.FieldUpdatedAt,
		toTerm: annotation.ByUpdatedAt,
		toCursor: func(a *Annotation) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AnnotationOrderField) String() string {
	var str string
	switch f.column {
	case AnnotationOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case AnnotationOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AnnotationOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AnnotationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AnnotationOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *AnnotationOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *AnnotationOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid AnnotationOrderField", str)
	}
	return nil
}

// AnnotationOrderField defines the ordering field of Annotation.
type AnnotationOrderField struct {
	// Value extracts the ordering value from the given Annotation.
	Value    func(*Annotation) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) annotation.OrderOption
	toCursor func(*Annotation) Cursor
}

// AnnotationOrder defines the ordering of Annotation.
type AnnotationOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *AnnotationOrderField `json:"field"`
}

// DefaultAnnotationOrder is the default ordering of Annotation.
var DefaultAnnotationOrder = &AnnotationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AnnotationOrderField{
		Value: func(a *Annotation) (ent.Value, error) {
			return a.ID, nil
		},
		column: annotation.FieldID,
		toTerm: annotation.ByID,
		toCursor: func(a *Annotation) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Annotation into AnnotationEdge.
func (a *Annotation) ToEdge(order *AnnotationOrder) *AnnotationEdge {
	if order == nil {
		order = DefaultAnnotationOrder
	}
	return &AnnotationEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// AnnotationNamespaceEdge is the edge representation of AnnotationNamespace.
type AnnotationNamespaceEdge struct {
	Node   *AnnotationNamespace `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

// AnnotationNamespaceConnection is the connection containing edges to AnnotationNamespace.
type AnnotationNamespaceConnection struct {
	Edges      []*AnnotationNamespaceEdge `json:"edges"`
	PageInfo   PageInfo                   `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

func (c *AnnotationNamespaceConnection) build(nodes []*AnnotationNamespace, pager *annotationnamespacePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AnnotationNamespace
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AnnotationNamespace {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AnnotationNamespace {
			return nodes[i]
		}
	}
	c.Edges = make([]*AnnotationNamespaceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AnnotationNamespaceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AnnotationNamespacePaginateOption enables pagination customization.
type AnnotationNamespacePaginateOption func(*annotationnamespacePager) error

// WithAnnotationNamespaceOrder configures pagination ordering.
func WithAnnotationNamespaceOrder(order *AnnotationNamespaceOrder) AnnotationNamespacePaginateOption {
	if order == nil {
		order = DefaultAnnotationNamespaceOrder
	}
	o := *order
	return func(pager *annotationnamespacePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAnnotationNamespaceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAnnotationNamespaceFilter configures pagination filter.
func WithAnnotationNamespaceFilter(filter func(*AnnotationNamespaceQuery) (*AnnotationNamespaceQuery, error)) AnnotationNamespacePaginateOption {
	return func(pager *annotationnamespacePager) error {
		if filter == nil {
			return errors.New("AnnotationNamespaceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type annotationnamespacePager struct {
	reverse bool
	order   *AnnotationNamespaceOrder
	filter  func(*AnnotationNamespaceQuery) (*AnnotationNamespaceQuery, error)
}

func newAnnotationNamespacePager(opts []AnnotationNamespacePaginateOption, reverse bool) (*annotationnamespacePager, error) {
	pager := &annotationnamespacePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAnnotationNamespaceOrder
	}
	return pager, nil
}

func (p *annotationnamespacePager) applyFilter(query *AnnotationNamespaceQuery) (*AnnotationNamespaceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *annotationnamespacePager) toCursor(an *AnnotationNamespace) Cursor {
	return p.order.Field.toCursor(an)
}

func (p *annotationnamespacePager) applyCursors(query *AnnotationNamespaceQuery, after, before *Cursor) (*AnnotationNamespaceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAnnotationNamespaceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *annotationnamespacePager) applyOrder(query *AnnotationNamespaceQuery) *AnnotationNamespaceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAnnotationNamespaceOrder.Field {
		query = query.Order(DefaultAnnotationNamespaceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *annotationnamespacePager) orderExpr(query *AnnotationNamespaceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAnnotationNamespaceOrder.Field {
			b.Comma().Ident(DefaultAnnotationNamespaceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AnnotationNamespace.
func (an *AnnotationNamespaceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AnnotationNamespacePaginateOption,
) (*AnnotationNamespaceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAnnotationNamespacePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if an, err = pager.applyFilter(an); err != nil {
		return nil, err
	}
	conn := &AnnotationNamespaceConnection{Edges: []*AnnotationNamespaceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = an.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if an, err = pager.applyCursors(an, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		an.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := an.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	an = pager.applyOrder(an)
	nodes, err := an.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AnnotationNamespaceOrderFieldID orders AnnotationNamespace by id.
	AnnotationNamespaceOrderFieldID = &AnnotationNamespaceOrderField{
		Value: func(an *AnnotationNamespace) (ent.Value, error) {
			return an.ID, nil
		},
		column: annotationnamespace.FieldID,
		toTerm: annotationnamespace.ByID,
		toCursor: func(an *AnnotationNamespace) Cursor {
			return Cursor{
				ID:    an.ID,
				Value: an.ID,
			}
		},
	}
	// AnnotationNamespaceOrderFieldCreatedAt orders AnnotationNamespace by created_at.
	AnnotationNamespaceOrderFieldCreatedAt = &AnnotationNamespaceOrderField{
		Value: func(an *AnnotationNamespace) (ent.Value, error) {
			return an.CreatedAt, nil
		},
		column: annotationnamespace.FieldCreatedAt,
		toTerm: annotationnamespace.ByCreatedAt,
		toCursor: func(an *AnnotationNamespace) Cursor {
			return Cursor{
				ID:    an.ID,
				Value: an.CreatedAt,
			}
		},
	}
	// AnnotationNamespaceOrderFieldUpdatedAt orders AnnotationNamespace by updated_at.
	AnnotationNamespaceOrderFieldUpdatedAt = &AnnotationNamespaceOrderField{
		Value: func(an *AnnotationNamespace) (ent.Value, error) {
			return an.UpdatedAt, nil
		},
		column: annotationnamespace.FieldUpdatedAt,
		toTerm: annotationnamespace.ByUpdatedAt,
		toCursor: func(an *AnnotationNamespace) Cursor {
			return Cursor{
				ID:    an.ID,
				Value: an.UpdatedAt,
			}
		},
	}
	// AnnotationNamespaceOrderFieldName orders AnnotationNamespace by name.
	AnnotationNamespaceOrderFieldName = &AnnotationNamespaceOrderField{
		Value: func(an *AnnotationNamespace) (ent.Value, error) {
			return an.Name, nil
		},
		column: annotationnamespace.FieldName,
		toTerm: annotationnamespace.ByName,
		toCursor: func(an *AnnotationNamespace) Cursor {
			return Cursor{
				ID:    an.ID,
				Value: an.Name,
			}
		},
	}
	// AnnotationNamespaceOrderFieldTenantID orders AnnotationNamespace by tenant_id.
	AnnotationNamespaceOrderFieldTenantID = &AnnotationNamespaceOrderField{
		Value: func(an *AnnotationNamespace) (ent.Value, error) {
			return an.TenantID, nil
		},
		column: annotationnamespace.FieldTenantID,
		toTerm: annotationnamespace.ByTenantID,
		toCursor: func(an *AnnotationNamespace) Cursor {
			return Cursor{
				ID:    an.ID,
				Value: an.TenantID,
			}
		},
	}
	// AnnotationNamespaceOrderFieldPrivate orders AnnotationNamespace by private.
	AnnotationNamespaceOrderFieldPrivate = &AnnotationNamespaceOrderField{
		Value: func(an *AnnotationNamespace) (ent.Value, error) {
			return an.Private, nil
		},
		column: annotationnamespace.FieldPrivate,
		toTerm: annotationnamespace.ByPrivate,
		toCursor: func(an *AnnotationNamespace) Cursor {
			return Cursor{
				ID:    an.ID,
				Value: an.Private,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AnnotationNamespaceOrderField) String() string {
	var str string
	switch f.column {
	case AnnotationNamespaceOrderFieldID.column:
		str = "ID"
	case AnnotationNamespaceOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case AnnotationNamespaceOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case AnnotationNamespaceOrderFieldName.column:
		str = "NAME"
	case AnnotationNamespaceOrderFieldTenantID.column:
		str = "TENANT"
	case AnnotationNamespaceOrderFieldPrivate.column:
		str = "PRIVATE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AnnotationNamespaceOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AnnotationNamespaceOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AnnotationNamespaceOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *AnnotationNamespaceOrderFieldID
	case "CREATED_AT":
		*f = *AnnotationNamespaceOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *AnnotationNamespaceOrderFieldUpdatedAt
	case "NAME":
		*f = *AnnotationNamespaceOrderFieldName
	case "TENANT":
		*f = *AnnotationNamespaceOrderFieldTenantID
	case "PRIVATE":
		*f = *AnnotationNamespaceOrderFieldPrivate
	default:
		return fmt.Errorf("%s is not a valid AnnotationNamespaceOrderField", str)
	}
	return nil
}

// AnnotationNamespaceOrderField defines the ordering field of AnnotationNamespace.
type AnnotationNamespaceOrderField struct {
	// Value extracts the ordering value from the given AnnotationNamespace.
	Value    func(*AnnotationNamespace) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) annotationnamespace.OrderOption
	toCursor func(*AnnotationNamespace) Cursor
}

// AnnotationNamespaceOrder defines the ordering of AnnotationNamespace.
type AnnotationNamespaceOrder struct {
	Direction OrderDirection                 `json:"direction"`
	Field     *AnnotationNamespaceOrderField `json:"field"`
}

// DefaultAnnotationNamespaceOrder is the default ordering of AnnotationNamespace.
var DefaultAnnotationNamespaceOrder = &AnnotationNamespaceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AnnotationNamespaceOrderField{
		Value: func(an *AnnotationNamespace) (ent.Value, error) {
			return an.ID, nil
		},
		column: annotationnamespace.FieldID,
		toTerm: annotationnamespace.ByID,
		toCursor: func(an *AnnotationNamespace) Cursor {
			return Cursor{ID: an.ID}
		},
	},
}

// ToEdge converts AnnotationNamespace into AnnotationNamespaceEdge.
func (an *AnnotationNamespace) ToEdge(order *AnnotationNamespaceOrder) *AnnotationNamespaceEdge {
	if order == nil {
		order = DefaultAnnotationNamespaceOrder
	}
	return &AnnotationNamespaceEdge{
		Node:   an,
		Cursor: order.Field.toCursor(an),
	}
}

// MetadataEdge is the edge representation of Metadata.
type MetadataEdge struct {
	Node   *Metadata `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// MetadataConnection is the connection containing edges to Metadata.
type MetadataConnection struct {
	Edges      []*MetadataEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *MetadataConnection) build(nodes []*Metadata, pager *metadataPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Metadata
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Metadata {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Metadata {
			return nodes[i]
		}
	}
	c.Edges = make([]*MetadataEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MetadataEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MetadataPaginateOption enables pagination customization.
type MetadataPaginateOption func(*metadataPager) error

// WithMetadataOrder configures pagination ordering.
func WithMetadataOrder(order *MetadataOrder) MetadataPaginateOption {
	if order == nil {
		order = DefaultMetadataOrder
	}
	o := *order
	return func(pager *metadataPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMetadataOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMetadataFilter configures pagination filter.
func WithMetadataFilter(filter func(*MetadataQuery) (*MetadataQuery, error)) MetadataPaginateOption {
	return func(pager *metadataPager) error {
		if filter == nil {
			return errors.New("MetadataQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type metadataPager struct {
	reverse bool
	order   *MetadataOrder
	filter  func(*MetadataQuery) (*MetadataQuery, error)
}

func newMetadataPager(opts []MetadataPaginateOption, reverse bool) (*metadataPager, error) {
	pager := &metadataPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMetadataOrder
	}
	return pager, nil
}

func (p *metadataPager) applyFilter(query *MetadataQuery) (*MetadataQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *metadataPager) toCursor(m *Metadata) Cursor {
	return p.order.Field.toCursor(m)
}

func (p *metadataPager) applyCursors(query *MetadataQuery, after, before *Cursor) (*MetadataQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultMetadataOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *metadataPager) applyOrder(query *MetadataQuery) *MetadataQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultMetadataOrder.Field {
		query = query.Order(DefaultMetadataOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *metadataPager) orderExpr(query *MetadataQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMetadataOrder.Field {
			b.Comma().Ident(DefaultMetadataOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Metadata.
func (m *MetadataQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MetadataPaginateOption,
) (*MetadataConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMetadataPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MetadataConnection{Edges: []*MetadataEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = m.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if m, err = pager.applyCursors(m, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	m = pager.applyOrder(m)
	nodes, err := m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MetadataOrderFieldCreatedAt orders Metadata by created_at.
	MetadataOrderFieldCreatedAt = &MetadataOrderField{
		Value: func(m *Metadata) (ent.Value, error) {
			return m.CreatedAt, nil
		},
		column: metadata.FieldCreatedAt,
		toTerm: metadata.ByCreatedAt,
		toCursor: func(m *Metadata) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.CreatedAt,
			}
		},
	}
	// MetadataOrderFieldUpdatedAt orders Metadata by updated_at.
	MetadataOrderFieldUpdatedAt = &MetadataOrderField{
		Value: func(m *Metadata) (ent.Value, error) {
			return m.UpdatedAt, nil
		},
		column: metadata.FieldUpdatedAt,
		toTerm: metadata.ByUpdatedAt,
		toCursor: func(m *Metadata) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MetadataOrderField) String() string {
	var str string
	switch f.column {
	case MetadataOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case MetadataOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MetadataOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MetadataOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MetadataOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *MetadataOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *MetadataOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid MetadataOrderField", str)
	}
	return nil
}

// MetadataOrderField defines the ordering field of Metadata.
type MetadataOrderField struct {
	// Value extracts the ordering value from the given Metadata.
	Value    func(*Metadata) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) metadata.OrderOption
	toCursor func(*Metadata) Cursor
}

// MetadataOrder defines the ordering of Metadata.
type MetadataOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *MetadataOrderField `json:"field"`
}

// DefaultMetadataOrder is the default ordering of Metadata.
var DefaultMetadataOrder = &MetadataOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MetadataOrderField{
		Value: func(m *Metadata) (ent.Value, error) {
			return m.ID, nil
		},
		column: metadata.FieldID,
		toTerm: metadata.ByID,
		toCursor: func(m *Metadata) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Metadata into MetadataEdge.
func (m *Metadata) ToEdge(order *MetadataOrder) *MetadataEdge {
	if order == nil {
		order = DefaultMetadataOrder
	}
	return &MetadataEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// StatusEdge is the edge representation of Status.
type StatusEdge struct {
	Node   *Status `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// StatusConnection is the connection containing edges to Status.
type StatusConnection struct {
	Edges      []*StatusEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *StatusConnection) build(nodes []*Status, pager *statusPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Status
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Status {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Status {
			return nodes[i]
		}
	}
	c.Edges = make([]*StatusEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &StatusEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// StatusPaginateOption enables pagination customization.
type StatusPaginateOption func(*statusPager) error

// WithStatusOrder configures pagination ordering.
func WithStatusOrder(order *StatusOrder) StatusPaginateOption {
	if order == nil {
		order = DefaultStatusOrder
	}
	o := *order
	return func(pager *statusPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultStatusOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithStatusFilter configures pagination filter.
func WithStatusFilter(filter func(*StatusQuery) (*StatusQuery, error)) StatusPaginateOption {
	return func(pager *statusPager) error {
		if filter == nil {
			return errors.New("StatusQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type statusPager struct {
	reverse bool
	order   *StatusOrder
	filter  func(*StatusQuery) (*StatusQuery, error)
}

func newStatusPager(opts []StatusPaginateOption, reverse bool) (*statusPager, error) {
	pager := &statusPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultStatusOrder
	}
	return pager, nil
}

func (p *statusPager) applyFilter(query *StatusQuery) (*StatusQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *statusPager) toCursor(s *Status) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *statusPager) applyCursors(query *StatusQuery, after, before *Cursor) (*StatusQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultStatusOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *statusPager) applyOrder(query *StatusQuery) *StatusQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultStatusOrder.Field {
		query = query.Order(DefaultStatusOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *statusPager) orderExpr(query *StatusQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultStatusOrder.Field {
			b.Comma().Ident(DefaultStatusOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Status.
func (s *StatusQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...StatusPaginateOption,
) (*StatusConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newStatusPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &StatusConnection{Edges: []*StatusEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = s.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// StatusOrderFieldCreatedAt orders Status by created_at.
	StatusOrderFieldCreatedAt = &StatusOrderField{
		Value: func(s *Status) (ent.Value, error) {
			return s.CreatedAt, nil
		},
		column: status.FieldCreatedAt,
		toTerm: status.ByCreatedAt,
		toCursor: func(s *Status) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.CreatedAt,
			}
		},
	}
	// StatusOrderFieldUpdatedAt orders Status by updated_at.
	StatusOrderFieldUpdatedAt = &StatusOrderField{
		Value: func(s *Status) (ent.Value, error) {
			return s.UpdatedAt, nil
		},
		column: status.FieldUpdatedAt,
		toTerm: status.ByUpdatedAt,
		toCursor: func(s *Status) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f StatusOrderField) String() string {
	var str string
	switch f.column {
	case StatusOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case StatusOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f StatusOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *StatusOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("StatusOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *StatusOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *StatusOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid StatusOrderField", str)
	}
	return nil
}

// StatusOrderField defines the ordering field of Status.
type StatusOrderField struct {
	// Value extracts the ordering value from the given Status.
	Value    func(*Status) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) status.OrderOption
	toCursor func(*Status) Cursor
}

// StatusOrder defines the ordering of Status.
type StatusOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *StatusOrderField `json:"field"`
}

// DefaultStatusOrder is the default ordering of Status.
var DefaultStatusOrder = &StatusOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &StatusOrderField{
		Value: func(s *Status) (ent.Value, error) {
			return s.ID, nil
		},
		column: status.FieldID,
		toTerm: status.ByID,
		toCursor: func(s *Status) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Status into StatusEdge.
func (s *Status) ToEdge(order *StatusOrder) *StatusEdge {
	if order == nil {
		order = DefaultStatusOrder
	}
	return &StatusEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// StatusNamespaceEdge is the edge representation of StatusNamespace.
type StatusNamespaceEdge struct {
	Node   *StatusNamespace `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// StatusNamespaceConnection is the connection containing edges to StatusNamespace.
type StatusNamespaceConnection struct {
	Edges      []*StatusNamespaceEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *StatusNamespaceConnection) build(nodes []*StatusNamespace, pager *statusnamespacePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *StatusNamespace
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *StatusNamespace {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *StatusNamespace {
			return nodes[i]
		}
	}
	c.Edges = make([]*StatusNamespaceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &StatusNamespaceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// StatusNamespacePaginateOption enables pagination customization.
type StatusNamespacePaginateOption func(*statusnamespacePager) error

// WithStatusNamespaceOrder configures pagination ordering.
func WithStatusNamespaceOrder(order *StatusNamespaceOrder) StatusNamespacePaginateOption {
	if order == nil {
		order = DefaultStatusNamespaceOrder
	}
	o := *order
	return func(pager *statusnamespacePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultStatusNamespaceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithStatusNamespaceFilter configures pagination filter.
func WithStatusNamespaceFilter(filter func(*StatusNamespaceQuery) (*StatusNamespaceQuery, error)) StatusNamespacePaginateOption {
	return func(pager *statusnamespacePager) error {
		if filter == nil {
			return errors.New("StatusNamespaceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type statusnamespacePager struct {
	reverse bool
	order   *StatusNamespaceOrder
	filter  func(*StatusNamespaceQuery) (*StatusNamespaceQuery, error)
}

func newStatusNamespacePager(opts []StatusNamespacePaginateOption, reverse bool) (*statusnamespacePager, error) {
	pager := &statusnamespacePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultStatusNamespaceOrder
	}
	return pager, nil
}

func (p *statusnamespacePager) applyFilter(query *StatusNamespaceQuery) (*StatusNamespaceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *statusnamespacePager) toCursor(sn *StatusNamespace) Cursor {
	return p.order.Field.toCursor(sn)
}

func (p *statusnamespacePager) applyCursors(query *StatusNamespaceQuery, after, before *Cursor) (*StatusNamespaceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultStatusNamespaceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *statusnamespacePager) applyOrder(query *StatusNamespaceQuery) *StatusNamespaceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultStatusNamespaceOrder.Field {
		query = query.Order(DefaultStatusNamespaceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *statusnamespacePager) orderExpr(query *StatusNamespaceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultStatusNamespaceOrder.Field {
			b.Comma().Ident(DefaultStatusNamespaceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to StatusNamespace.
func (sn *StatusNamespaceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...StatusNamespacePaginateOption,
) (*StatusNamespaceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newStatusNamespacePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sn, err = pager.applyFilter(sn); err != nil {
		return nil, err
	}
	conn := &StatusNamespaceConnection{Edges: []*StatusNamespaceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sn.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sn, err = pager.applyCursors(sn, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sn.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sn.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sn = pager.applyOrder(sn)
	nodes, err := sn.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// StatusNamespaceOrderFieldID orders StatusNamespace by id.
	StatusNamespaceOrderFieldID = &StatusNamespaceOrderField{
		Value: func(sn *StatusNamespace) (ent.Value, error) {
			return sn.ID, nil
		},
		column: statusnamespace.FieldID,
		toTerm: statusnamespace.ByID,
		toCursor: func(sn *StatusNamespace) Cursor {
			return Cursor{
				ID:    sn.ID,
				Value: sn.ID,
			}
		},
	}
	// StatusNamespaceOrderFieldCreatedAt orders StatusNamespace by created_at.
	StatusNamespaceOrderFieldCreatedAt = &StatusNamespaceOrderField{
		Value: func(sn *StatusNamespace) (ent.Value, error) {
			return sn.CreatedAt, nil
		},
		column: statusnamespace.FieldCreatedAt,
		toTerm: statusnamespace.ByCreatedAt,
		toCursor: func(sn *StatusNamespace) Cursor {
			return Cursor{
				ID:    sn.ID,
				Value: sn.CreatedAt,
			}
		},
	}
	// StatusNamespaceOrderFieldUpdatedAt orders StatusNamespace by updated_at.
	StatusNamespaceOrderFieldUpdatedAt = &StatusNamespaceOrderField{
		Value: func(sn *StatusNamespace) (ent.Value, error) {
			return sn.UpdatedAt, nil
		},
		column: statusnamespace.FieldUpdatedAt,
		toTerm: statusnamespace.ByUpdatedAt,
		toCursor: func(sn *StatusNamespace) Cursor {
			return Cursor{
				ID:    sn.ID,
				Value: sn.UpdatedAt,
			}
		},
	}
	// StatusNamespaceOrderFieldName orders StatusNamespace by name.
	StatusNamespaceOrderFieldName = &StatusNamespaceOrderField{
		Value: func(sn *StatusNamespace) (ent.Value, error) {
			return sn.Name, nil
		},
		column: statusnamespace.FieldName,
		toTerm: statusnamespace.ByName,
		toCursor: func(sn *StatusNamespace) Cursor {
			return Cursor{
				ID:    sn.ID,
				Value: sn.Name,
			}
		},
	}
	// StatusNamespaceOrderFieldResourceProviderID orders StatusNamespace by resource_provider_id.
	StatusNamespaceOrderFieldResourceProviderID = &StatusNamespaceOrderField{
		Value: func(sn *StatusNamespace) (ent.Value, error) {
			return sn.ResourceProviderID, nil
		},
		column: statusnamespace.FieldResourceProviderID,
		toTerm: statusnamespace.ByResourceProviderID,
		toCursor: func(sn *StatusNamespace) Cursor {
			return Cursor{
				ID:    sn.ID,
				Value: sn.ResourceProviderID,
			}
		},
	}
	// StatusNamespaceOrderFieldPrivate orders StatusNamespace by private.
	StatusNamespaceOrderFieldPrivate = &StatusNamespaceOrderField{
		Value: func(sn *StatusNamespace) (ent.Value, error) {
			return sn.Private, nil
		},
		column: statusnamespace.FieldPrivate,
		toTerm: statusnamespace.ByPrivate,
		toCursor: func(sn *StatusNamespace) Cursor {
			return Cursor{
				ID:    sn.ID,
				Value: sn.Private,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f StatusNamespaceOrderField) String() string {
	var str string
	switch f.column {
	case StatusNamespaceOrderFieldID.column:
		str = "ID"
	case StatusNamespaceOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case StatusNamespaceOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case StatusNamespaceOrderFieldName.column:
		str = "NAME"
	case StatusNamespaceOrderFieldResourceProviderID.column:
		str = "TENANT"
	case StatusNamespaceOrderFieldPrivate.column:
		str = "PRIVATE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f StatusNamespaceOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *StatusNamespaceOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("StatusNamespaceOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *StatusNamespaceOrderFieldID
	case "CREATED_AT":
		*f = *StatusNamespaceOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *StatusNamespaceOrderFieldUpdatedAt
	case "NAME":
		*f = *StatusNamespaceOrderFieldName
	case "TENANT":
		*f = *StatusNamespaceOrderFieldResourceProviderID
	case "PRIVATE":
		*f = *StatusNamespaceOrderFieldPrivate
	default:
		return fmt.Errorf("%s is not a valid StatusNamespaceOrderField", str)
	}
	return nil
}

// StatusNamespaceOrderField defines the ordering field of StatusNamespace.
type StatusNamespaceOrderField struct {
	// Value extracts the ordering value from the given StatusNamespace.
	Value    func(*StatusNamespace) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) statusnamespace.OrderOption
	toCursor func(*StatusNamespace) Cursor
}

// StatusNamespaceOrder defines the ordering of StatusNamespace.
type StatusNamespaceOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *StatusNamespaceOrderField `json:"field"`
}

// DefaultStatusNamespaceOrder is the default ordering of StatusNamespace.
var DefaultStatusNamespaceOrder = &StatusNamespaceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &StatusNamespaceOrderField{
		Value: func(sn *StatusNamespace) (ent.Value, error) {
			return sn.ID, nil
		},
		column: statusnamespace.FieldID,
		toTerm: statusnamespace.ByID,
		toCursor: func(sn *StatusNamespace) Cursor {
			return Cursor{ID: sn.ID}
		},
	},
}

// ToEdge converts StatusNamespace into StatusNamespaceEdge.
func (sn *StatusNamespace) ToEdge(order *StatusNamespaceOrder) *StatusNamespaceEdge {
	if order == nil {
		order = DefaultStatusNamespaceOrder
	}
	return &StatusNamespaceEdge{
		Node:   sn,
		Cursor: order.Field.toCursor(sn),
	}
}
