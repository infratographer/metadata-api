// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/metadata-api/internal/ent/generated/status"
	"go.infratographer.com/metadata-api/internal/ent/generated/statusnamespace"
	"go.infratographer.com/x/gidx"
)

// StatusNamespaceCreate is the builder for creating a StatusNamespace entity.
type StatusNamespaceCreate struct {
	config
	mutation *StatusNamespaceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *StatusNamespaceCreate) SetCreatedAt(v time.Time) *StatusNamespaceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *StatusNamespaceCreate) SetNillableCreatedAt(v *time.Time) *StatusNamespaceCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *StatusNamespaceCreate) SetUpdatedAt(v time.Time) *StatusNamespaceCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *StatusNamespaceCreate) SetNillableUpdatedAt(v *time.Time) *StatusNamespaceCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *StatusNamespaceCreate) SetName(v string) *StatusNamespaceCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetResourceProviderID sets the "resource_provider_id" field.
func (_c *StatusNamespaceCreate) SetResourceProviderID(v gidx.PrefixedID) *StatusNamespaceCreate {
	_c.mutation.SetResourceProviderID(v)
	return _c
}

// SetPrivate sets the "private" field.
func (_c *StatusNamespaceCreate) SetPrivate(v bool) *StatusNamespaceCreate {
	_c.mutation.SetPrivate(v)
	return _c
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (_c *StatusNamespaceCreate) SetNillablePrivate(v *bool) *StatusNamespaceCreate {
	if v != nil {
		_c.SetPrivate(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *StatusNamespaceCreate) SetID(v gidx.PrefixedID) *StatusNamespaceCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *StatusNamespaceCreate) SetNillableID(v *gidx.PrefixedID) *StatusNamespaceCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddStatusIDs adds the "statuses" edge to the Status entity by IDs.
func (_c *StatusNamespaceCreate) AddStatusIDs(ids ...gidx.PrefixedID) *StatusNamespaceCreate {
	_c.mutation.AddStatusIDs(ids...)
	return _c
}

// AddStatuses adds the "statuses" edges to the Status entity.
func (_c *StatusNamespaceCreate) AddStatuses(v ...*Status) *StatusNamespaceCreate {
	ids := make([]gidx.PrefixedID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddStatusIDs(ids...)
}

// Mutation returns the StatusNamespaceMutation object of the builder.
func (_c *StatusNamespaceCreate) Mutation() *StatusNamespaceMutation {
	return _c.mutation
}

// Save creates the StatusNamespace in the database.
func (_c *StatusNamespaceCreate) Save(ctx context.Context) (*StatusNamespace, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *StatusNamespaceCreate) SaveX(ctx context.Context) *StatusNamespace {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StatusNamespaceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StatusNamespaceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *StatusNamespaceCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := statusnamespace.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := statusnamespace.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Private(); !ok {
		v := statusnamespace.DefaultPrivate
		_c.mutation.SetPrivate(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := statusnamespace.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *StatusNamespaceCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "StatusNamespace.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "StatusNamespace.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "StatusNamespace.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := statusnamespace.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "StatusNamespace.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ResourceProviderID(); !ok {
		return &ValidationError{Name: "resource_provider_id", err: errors.New(`generated: missing required field "StatusNamespace.resource_provider_id"`)}
	}
	if v, ok := _c.mutation.ResourceProviderID(); ok {
		if err := statusnamespace.ResourceProviderIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "resource_provider_id", err: fmt.Errorf(`generated: validator failed for field "StatusNamespace.resource_provider_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Private(); !ok {
		return &ValidationError{Name: "private", err: errors.New(`generated: missing required field "StatusNamespace.private"`)}
	}
	return nil
}

func (_c *StatusNamespaceCreate) sqlSave(ctx context.Context) (*StatusNamespace, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *StatusNamespaceCreate) createSpec() (*StatusNamespace, *sqlgraph.CreateSpec) {
	var (
		_node = &StatusNamespace{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(statusnamespace.Table, sqlgraph.NewFieldSpec(statusnamespace.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(statusnamespace.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(statusnamespace.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(statusnamespace.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.ResourceProviderID(); ok {
		_spec.SetField(statusnamespace.FieldResourceProviderID, field.TypeString, value)
		_node.ResourceProviderID = value
	}
	if value, ok := _c.mutation.Private(); ok {
		_spec.SetField(statusnamespace.FieldPrivate, field.TypeBool, value)
		_node.Private = value
	}
	if nodes := _c.mutation.StatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   statusnamespace.StatusesTable,
			Columns: []string{statusnamespace.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StatusNamespaceCreateBulk is the builder for creating many StatusNamespace entities in bulk.
type StatusNamespaceCreateBulk struct {
	config
	err      error
	builders []*StatusNamespaceCreate
}

// Save creates the StatusNamespace entities in the database.
func (_c *StatusNamespaceCreateBulk) Save(ctx context.Context) ([]*StatusNamespace, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*StatusNamespace, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatusNamespaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *StatusNamespaceCreateBulk) SaveX(ctx context.Context) []*StatusNamespace {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StatusNamespaceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StatusNamespaceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
