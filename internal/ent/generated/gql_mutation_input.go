// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"encoding/json"

	"go.infratographer.com/x/gidx"
)

// CreateAnnotationNamespaceInput represents a mutation input for creating annotationnamespaces.
type CreateAnnotationNamespaceInput struct {
	Name     string
	TenantID gidx.PrefixedID
	Private  *bool
}

// Mutate applies the CreateAnnotationNamespaceInput on the AnnotationNamespaceMutation builder.
func (i *CreateAnnotationNamespaceInput) Mutate(m *AnnotationNamespaceMutation) {
	m.SetName(i.Name)
	m.SetTenantID(i.TenantID)
	if v := i.Private; v != nil {
		m.SetPrivate(*v)
	}
}

// SetInput applies the change-set in the CreateAnnotationNamespaceInput on the AnnotationNamespaceCreate builder.
func (c *AnnotationNamespaceCreate) SetInput(i CreateAnnotationNamespaceInput) *AnnotationNamespaceCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAnnotationNamespaceInput represents a mutation input for updating annotationnamespaces.
type UpdateAnnotationNamespaceInput struct {
	Name    *string
	Private *bool
}

// Mutate applies the UpdateAnnotationNamespaceInput on the AnnotationNamespaceMutation builder.
func (i *UpdateAnnotationNamespaceInput) Mutate(m *AnnotationNamespaceMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Private; v != nil {
		m.SetPrivate(*v)
	}
}

// SetInput applies the change-set in the UpdateAnnotationNamespaceInput on the AnnotationNamespaceUpdate builder.
func (c *AnnotationNamespaceUpdate) SetInput(i UpdateAnnotationNamespaceInput) *AnnotationNamespaceUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAnnotationNamespaceInput on the AnnotationNamespaceUpdateOne builder.
func (c *AnnotationNamespaceUpdateOne) SetInput(i UpdateAnnotationNamespaceInput) *AnnotationNamespaceUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateStatusInput represents a mutation input for creating statusslice.
type CreateStatusInput struct {
	Source      string
	Data        json.RawMessage
	NamespaceID gidx.PrefixedID
	MetadataID  gidx.PrefixedID
}

// Mutate applies the CreateStatusInput on the StatusMutation builder.
func (i *CreateStatusInput) Mutate(m *StatusMutation) {
	m.SetSource(i.Source)
	if v := i.Data; v != nil {
		m.SetData(v)
	}
	m.SetNamespaceID(i.NamespaceID)
	m.SetMetadataID(i.MetadataID)
}

// SetInput applies the change-set in the CreateStatusInput on the StatusCreate builder.
func (c *StatusCreate) SetInput(i CreateStatusInput) *StatusCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateStatusInput represents a mutation input for updating statusslice.
type UpdateStatusInput struct {
	Data       json.RawMessage
	AppendData json.RawMessage
}

// Mutate applies the UpdateStatusInput on the StatusMutation builder.
func (i *UpdateStatusInput) Mutate(m *StatusMutation) {
	if v := i.Data; v != nil {
		m.SetData(v)
	}
	if i.AppendData != nil {
		m.AppendData(i.Data)
	}
}

// SetInput applies the change-set in the UpdateStatusInput on the StatusUpdate builder.
func (c *StatusUpdate) SetInput(i UpdateStatusInput) *StatusUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateStatusInput on the StatusUpdateOne builder.
func (c *StatusUpdateOne) SetInput(i UpdateStatusInput) *StatusUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateStatusNamespaceInput represents a mutation input for creating statusnamespaces.
type CreateStatusNamespaceInput struct {
	Name               string
	ResourceProviderID gidx.PrefixedID
	Private            *bool
}

// Mutate applies the CreateStatusNamespaceInput on the StatusNamespaceMutation builder.
func (i *CreateStatusNamespaceInput) Mutate(m *StatusNamespaceMutation) {
	m.SetName(i.Name)
	m.SetResourceProviderID(i.ResourceProviderID)
	if v := i.Private; v != nil {
		m.SetPrivate(*v)
	}
}

// SetInput applies the change-set in the CreateStatusNamespaceInput on the StatusNamespaceCreate builder.
func (c *StatusNamespaceCreate) SetInput(i CreateStatusNamespaceInput) *StatusNamespaceCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateStatusNamespaceInput represents a mutation input for updating statusnamespaces.
type UpdateStatusNamespaceInput struct {
	Name    *string
	Private *bool
}

// Mutate applies the UpdateStatusNamespaceInput on the StatusNamespaceMutation builder.
func (i *UpdateStatusNamespaceInput) Mutate(m *StatusNamespaceMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Private; v != nil {
		m.SetPrivate(*v)
	}
}

// SetInput applies the change-set in the UpdateStatusNamespaceInput on the StatusNamespaceUpdate builder.
func (c *StatusNamespaceUpdate) SetInput(i UpdateStatusNamespaceInput) *StatusNamespaceUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateStatusNamespaceInput on the StatusNamespaceUpdateOne builder.
func (c *StatusNamespaceUpdateOne) SetInput(i UpdateStatusNamespaceInput) *StatusNamespaceUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
